/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

/* 1 */

/**
 * Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

// Minimal set of properties required for DOM Level 2 Range compliance. Comparison constants such as START_TO_START

// are omitted because ranges in KHTML do not have them but otherwise work perfectly well. See issue 113.

/*----------------------------------------------------------------------------------------------------------------*/

// Trio of functions taken from Peter Michaux's article:

// http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting

// Creates a convenience function to save verbose repeated calls to tests functions

// Next trio of functions are a convenience to save verbose repeated calls to previous two functions

// Special case for toString, which does not show up in for...in loops in IE <= 8

// Test whether we're in a browser and bail out if not

// Test whether Array.prototype.slice can be relied on for NodeLists and use an alternative toArray() if not

// Initialization

// First, perform basic feature tests

// Initialize modules

// Call init listeners

// Allow external scripts to initialize this library in case it's loaded after the document has loaded

// Execute listener immediately if already initialized

// Ensure rangy.rangePrototype and rangy.selectionPrototype are available immediately

// Notify listeners

// Now run initializer

// Allow 2 or 3 arguments (second argument is an optional array of dependencies)

// Initialize the module immediately if the core is already initialized

// DOM utility methods used by Rangy

// Perform feature tests

// innerHTML is required for Range's createContextualFragment method

// Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been

// able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that

// contains just the document as a single element and the value searched for is the document.

/*Array.prototype.indexOf ?
            function(arr, val) {
                return arr.indexOf(val) > -1;
            }:*/

// Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI

// Text, CDataSection or Comment

// Note that we cannot use splitText() because it is bugridden in IE 9.

// This looks bad. Is it worth it?

// Test for IE's crash (IE 6/7) or exception (IE >= 8) when a reference to garbage-collected text node is queried

// Text or Comment

// Preserve positions

// Handle case where position was inside the portion of node after the split point

// See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing

// Case 1: nodes are the same

// Case 2: node C (container B or an ancestor) is a child node of A

// Case 3: node C (container A or an ancestor) is a child node of B

// Case 4: containers are siblings or descendants of siblings

// This shouldn't be possible

// Insert the test element at the start of the body to prevent scrolling to the bottom in iOS (issue #292)

// Pure JavaScript implementation of DOM Range

// Utility functions

// The node is partially selected by the Range, so we can use a new RangeIterator on the portion of

// the node selected by the Range.

// The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its

// descendants

// DocumentType

// RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)

// Move to next node

// Check for partially selected text nodes

// Checks if the current node is partially selected

// Test the browser's innerHTML support to decide how to implement createContextualFragment

// IE 6 and 7 throw

// Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See

// discussion and base code for this implementation at issue 67.

// Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface

// Thanks to Aleks Williams.

// "Let node the context object's start's node."

// "If the context object's start's node is null, raise an INVALID_STATE_ERR

// exception and abort these steps."

// "Let element be as follows, depending on node's interface:"

// Document, Document Fragment: null

// "Element: node"

// "If this raises an exception, then abort these steps. Otherwise, let new

// children be the nodes returned."

// "Let fragment be a new DocumentFragment."

// "Append all new children to fragment."

// "Return fragment."

// "If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm."

// "If the node's document is an XML document: Invoke the XML fragment parsing algorithm."

// "In either case, the algorithm must be invoked with fragment as the input

// and element as the context element."

// "If either element is null or element's ownerDocument is an HTML document

// and element's local name is "html" and element's namespace is the HTML

// namespace"

// "let element be a new Element with "body" as its local name and the HTML

// namespace as its namespace.""

// In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that

// previous versions of Rangy used (with the exception of using a body element rather than a div)

// Check none of the range is read-only

// Remove the content

// Move to the new position

// Check the root containers of the range and the new boundary, and also check whether the new boundary

// is after the current end. In either case, collapse the range to the new position

// Set up inheritance

/**
                 * Convenience method to set a range's start and end boundaries. Overloaded as follows:
                 * - Two parameters (node, offset) creates a collapsed range at that position
                 * - Three parameters (node, startOffset, endOffset) creates a range contained with node starting at
                 *   startOffset and ending at endOffset
                 * - Four parameters (startNode, startOffset, endNode, endOffset) creates a range starting at startOffset in
                 *   startNode and ending at endOffset in endNode
                 */

// Check if the contents can be surrounded. Specifically, this means whether the range partially selects

// no non-text nodes.

// Updates commonAncestorContainer and collapsed after boundary change

// No check for whether the container of the start of the Range is of a type that does not allow

// children of the type of node: the browser's DOM implementation should do this for us when we attempt

// to add the node

// Extract the contents

// Clear the children of the node

// Insert the new node and add the extracted contents

// Accept only text or CDATA nodes, not comments

// The methods below are all non-standard. The following batch were introduced by Mozilla but have since

// been removed from Mozilla.

// touchingIsIntersecting determines whether this method considers a node that borders a range intersects

// with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)

// The methods below are non-standard and invented by me.

// Sharing a boundary start-to-end or end-to-start does not count as intersection.

// Sharing a boundary start-to-end or end-to-start does count as intersection.

// Don't include a boundary container if it is a character data node and the range does not contain any

// of its character data. See issue 190.

// In DOM4, detach() is now a no-op.

// Wrappers for the browser's native DOM Range and/or TextRange implementation

// This is a wrapper around the browser's native DOM Range. It has two aims:

// - Provide workarounds for specific browser bugs

// - provide convenient extensions, which are inherited from Rangy's DomRange

// Fix for broken collapsed property in IE 9.

// Always set both boundaries for the benefit of IE9 (see issue 35)

// Due to a long-standing Firefox bug that I have not been able to find a reliable way to detect,

// insertNode() is never delegated to the native range.

// Create test range and node for feature detection

/*--------------------------------------------------------------------------------------------------------*/

// Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and

// correct for it

// Always use DOM4-compliant selectNodeContents implementation: it's simpler and less code than testing

// whether the native implementation can be trusted

// Test for and correct WebKit bug that has the behaviour of compareBoundaryPoints round the wrong way for

// constants START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738

// This is the wrong way round, so correct for it

// Test for IE deleteContents() and extractContents() bug and correct it. See issue 107.

// Behaviour is correct per DOM4 Range so wrap the browser's implementation of deleteContents() and

// extractContents()

// Test for existence of createContextualFragment and delegate to it if it exists

// Clean up

/*
            This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()
            method. For example, in the following (where pipes denote the selection boundaries):

            <ul id="ul"><li id="a">| a </li><li id="b"> b |</li></ul>

            var range = document.selection.createRange();
            alert(range.parentElement().id); // Should alert "ul" but alerts "b"

            This method returns the common ancestor node of the following:
            - the parentElement() of the textRange
            - the parentElement() of the textRange after calling collapse(true)
            - the parentElement() of the textRange after calling collapse(false)
            */

// Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so

// check for that

// Deal with nodes that cannot "contain rich HTML markup". In practice, this means form inputs, images and

// similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx

// Workaround for HTML5 Shiv's insane violation of document.createElement(). See Rangy issue 104 and HTML5

// Shiv issue 64: https://github.com/aFarkas/html5shiv/issues/64

// We know the endth child node is after the range boundary, so we must be done.

// We've now reached or gone past the boundary of the text range we're interested in

// so have identified the node we want

// This is a character data node (text, comment, cdata). The working range is collapsed at the start of

// the node containing the text range's boundary, so we move the end of the working range to the

// boundary point and measure the length of its text to get the boundary's offset within the node.

/*
                        For the particular case of a boundary within a text node containing rendered line breaks (within a
                        <pre> element, for example), we need a slightly complicated approach to get the boundary's offset in
                        IE. The facts:

                        - Each line break is represented as \r in the text node's data/nodeValue properties
                        - Each line break is represented as \r\n in the TextRange's 'text' property
                        - The 'text' property of the TextRange does not contain trailing line breaks

                        To get round the problem presented by the final fact above, we can use the fact that TextRange's
                        moveStart() and moveEnd() methods return the actual number of characters moved, which is not
                        necessarily the same as the number of characters it was instructed to move. The simplest approach is
                        to use this to store the characters moved when moving both the start and end of the range to the
                        start of the document body and subtracting the start offset from the end offset (the
                        "move-negative-gazillion" method). However, this is extremely slow when the document is large and
                        the range is near the end of it. Clearly doing the mirror image (i.e. moving the range boundaries to
                        the end of the document) has the same problem.

                        Another approach that works is to use moveStart() to move the start boundary of the range up to the
                        end boundary one character at a time and incrementing a counter with the value returned by the
                        moveStart() call. However, the check for whether the start boundary has reached the end boundary is
                        expensive, so this method is slow (although unlike "move-negative-gazillion" is largely unaffected
                        by the location of the range within the document).

                        The approach used below is a hybrid of the two methods above. It uses the fact that a string
                        containing the TextRange's 'text' property with each \r\n converted to a single \r character cannot
                        be longer than the text of the TextRange, so the start of the range is moved that length initially
                        and then a character at a time to make up for any trailing line breaks not contained in the 'text'
                        property. This has good performance in most situations compared to the previous two methods.
                        */

// If the boundary immediately follows a character data node and this is the end boundary, we should favour

// a position within that, and likewise for a start boundary preceding a character data node

// Making the working element non-empty element persuades IE to consider the TextRange boundary to be within

// the element rather than immediately before or after it

// Position the range immediately before the node containing the boundary

// insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report

// for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12

// Move the working range to the text offset, if required

/*------------------------------------------------------------------------------------------------------------*/

// This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a

// prototype

// TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that.

// An optimization used here is that if the start and end boundaries have the same parent element, the

// search scope for the end boundary can be limited to exclude the portion of the element that precedes

// the start boundary

// IE 9 and above have both implementations and Rangy makes both available. The next few lines sets which

// implementation to use by default.

// Add WrappedTextRange as the Range property of the global object to allow expression like Range.END_TO_END to work

// This module creates a selection object wrapper that conforms as closely as possible to the Selection specification

// in the HTML Editing spec (http://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#selections)

// Utility function to support direction parameters in the API that may be a string ("backward", "backwards",

// "forward" or "forwards") or a Boolean (true for backwards).

// Test for the Range/TextRange and Selection features required

// Test for ability to retrieve selection

// Check whether the selection TextRange is actually contained within the correct document

// In Firefox, the selection is null in an iframe with display: none. See issue #138.

// Test for existence of native selection extend() method

// Test if rangeCount exists

// Previously an iframe was used but this caused problems in some circumstances in IE, so tests are

// performed on the current document's selection. See issue 109.

// Note also that if a selection previously existed, it is wiped and later restored by these tests. This

// will result in the selection direction begin reversed if the original selection was backwards and the

// browser does not support setting backwards selections (Internet Explorer, I'm looking at you).

// Store the current selection

// Create some test elements

// Test whether the native selection is capable of supporting multiple ranges.

// Doing the original feature test here in Chrome 36 (and presumably later versions) prints a

// console error of "Discontiguous selection is not supported." that cannot be suppressed. There's

// nothing we can do about this while retaining the feature test so we have to resort to a browser

// sniff. I'm not happy about it. See

// https://code.google.com/p/chromium/issues/detail?id=399791

// ControlRanges

// Simple, quick test which only needs to distinguish between a TextRange and a ControlRange

// Create a Range from the selected TextRange

// Update the wrapped selection based on what's now in the native selection

// This case (where the selection type is "Control" and calling createRange() on the selection returns

// a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected

// ControlRange have been removed from the ControlRange and removed from the document.

// Selection collapsedness

// try/catch is present because getRangeAt() must have thrown an error in some browser and some situation.

// Unfortunately, I didn't write a comment about the specifics and am now scared to take it out. Let that be a

// lesson to us all, especially me.

// Handle the case when the selection was selected backwards (from the end to the start in the

// document)

// Check if the parameter is a Rangy Selection object

// Ensure that the selection becomes of type "Control"

// Selecting a range

// Clone the native range so that changing the selected range does not affect the selection.

// This is contrary to the spec but is the only way to achieve consistency between browsers. See

// issue 80.

// Check whether adding the range was successful

// The range was added successfully

// Check whether the range that we added to the selection is reflected in the last range extracted from

// the selection

// Happens in WebKit with, for example, a selection placed at the start of a text node

// The range was not added successfully. The simplest thing is to refresh

// Added try/catch as fix for issue #21

// Check for empty() not working (issue #24)

// Work around failure to empty a control selection by instead selecting a TextRange and then

// calling empty()

// Clone the range to preserve selection-range independence. See issue 80.

// Check the range count first

// Now check the direction. Checking the anchor position is the same is enough since we're checking all the

// ranges after this

// Finally, compare each range in turn

// Removal of a single range

// No current browser conforms fully to the spec for this method, so Rangy's own method is always used

// Create an alias for backwards compatibility. From 1.3, everything is "backward" rather than "backwards"

// Selection stringifier

// This is conformant to the old HTML5 selections draft spec but differs from WebKit and Mozilla's implementation.

// The current spec does not yet define this method.

// The spec is very specific on how selectAllChildren should be implemented and not all browsers implement it as

// specified so the native implementation is never used by Rangy.

// Sepcial behaviour required for IE's control selections

// The spec says nothing about what the selection should contain after calling deleteContents on each

// range. Firefox moves the selection to where the final selected range was, so we emulate that

// The following are non-standard extensions

// Add select() method to Range prototype. Any existing selection will be removed.

// Detecting if a selection is backward

// Wait for document to load before initializing

// Test whether the document has already been loaded and initialize immediately if so

// Add a fallback in case the DOMContentLoaded event isn't supported

/* 2 */

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// Copy bytes to buffer, if provided

/* 3 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 4 */

/* 5 */

/* WEBPACK VAR INJECTION */

/* harmony import */

/* global window */

/* harmony default export */

/* 6 */

// Unique ID creation requires a high quality random # generator.  In the

// browser this is a little complicated due to unknown quality of Math.random()

// and inconsistent support for the `crypto` API.  We do the best we can via

// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto

// implementation. Also, find the complete implementation of crypto on IE11.

// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto

// eslint-disable-line no-undef

// Math.random()-based (RNG)

//

// If all else fails, use Math.random().  It's fast, but is of unspecified

// quality.

/* 7 */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

/* 8 */

/* 9 */

/* harmony export (binding) */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

// extracted by mini-css-extract-plugin

/* 17 */

/* 18 */

/**
 * The code was extracted from:
 * https://github.com/davidchambers/Base64.js
 */

// initialize result and counters

// get next character

// character found in table? initialize bit storage and add its ascii value;

// and if not first of each 4 characters,

// convert the first 8 bits to one ascii character

// try to find character in table (0-63, not found => -1)

/* 19 */

// See https://github.com/broofa/node-uuid for API details

// node and clockseq need to be initialized to random values if they're not

// specified.  We do this lazily to minimize issues related to insufficient

// system entropy.  See #189

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

// Per 4.2.2, randomize (14 bit) clockseq

// UUID timestamps are 100 nano-second units since the Gregorian epoch,

// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so

// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'

// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

// Per 4.2.1.2, use count of uuid's generated during the current clock

// cycle to simulate higher resolution clock

// Per 4.2.1.2 Throw error if too many uuids are requested

// Per 4.2.1.2, Bump clockseq on clock regression

// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new

// time interval

// `time_low`

// Per 4.1.4 - Convert from unix epoch to Gregorian epoch

// `time_mid`

// `time_high_and_version`

// include version

// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

// `clock_seq_low`

// `node`

/* 20 */

// module.parent = undefined by default

/* 21 */

/**
 * Class Applier module for Rangy.
 * Adds, removes and toggles classes on Ranges and Selections
 *
 * Part of Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Depends on Rangy core.
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

// Inefficient, inelegant nonsense for IE's svg element, which has no classList and non-HTML className implementation

// For convenience, allow newIndex to be -1 to mean "insert at the end".

// Now actually move the node.

// Optimization as per issue 145

// Remove non-intersecting text nodes from the start of the range

// White space characters as defined by HTML 4 (http://www.w3.org/TR/html401/struct/text.html)

// descendantNode is now guaranteed not to be a text or other character node

// Work out a new split point in the parent node

// Can merge if the node's previous/next sibling is a text node

// Compare text node parent element with its sibling

// Handle case where position is inside the text node being merged into a preceding node

// Handle case where both text nodes precede the position within the same parent node

// TODO: Populate this with every attribute name that corresponds to a property with a different name. Really??

// cssClass property is for backward compatibility

// Initialize from options object

// Backward compatibility: the second parameter can also be a Boolean indicating to normalize after unapplying

// Initialize element properties and attribute exceptions

// Ensure each attribute value is a string

// Initialize tag names

// Special case for class. The copied properties object has the applier's class as well as its own

// to simplify checks when removing styling elements

// Copy the property back from the dummy element so that later comparisons to check whether

// elements may be removed are checking against the right value. For example, the href property

// of an element returns a fully qualified URL even if it was previously assigned a relative

// URL.

// Not all properties map to identically-named attributes

// White space adjacent to an unwrappable node can be ignored for wrapping

// We now have a whitespace-only text node that may be rendered depending on its context. If it is adjacent to a

// non-inline element, it will not be rendered. This seems to be a good enough definition.

// Normalizes nodes after applying a class to a Range.

// Check for every required merge and create a Merge object for each

// Test whether the first node after the range needs merging

// Apply the merges

// Set the range boundaries

// For checking whether we should reuse an existing element, we just want to check that the element

// has all the classes specified in the className property. When deciding whether the element is

// removable when unapplying a class, there is separate special handling to check whether the

// element has extra classes so the same simple check will do.

// Check whether the text node can be styled. Text within a <style> or <script> element, for example,

// should not be styled. See issue 283.

// Update the range from the preserved boundary positions

// Split out the portion of the ancestor from which we can remove the class

//var parent = ancestorWithClass.parentNode, index = dom.getNodeIndex(ancestorWithClass);

// Tidy up the DOM by removing empty containers

// Update the ranges from the preserved boundary positions

// Apply classes to any appropriate empty elements

// Create an array of range boundaries to preserve

// Ensure the range is still valid

// Remove class from any appropriate empty elements

// Get ranges returned in document order

/* 22 */

/**
 * Highlighter module for Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Depends on Rangy core, ClassApplier and optionally TextRange modules.
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

// Puts highlights in order, last in document first.

// Lazily load the TextRange-based converter so that the dependency is only checked when required.

// Test that textRangeModule exists and is supported

// Test each range against each of the highlighted ranges to see whether they overlap

//var selCharRange = converter.rangeToCharacterRange(range);

// Ignore empty ranges

// Restrict character range to container element, if it exists

// Check for intersection with existing highlights. For each intersection, create a new highlight

// which is the union of the highlight range and the selected range

// Replace the existing highlight if it needs to be:

//  1. merged (isSameClassApplier)

//  2. partially or entirely erased (className === null)

//  3. partially or entirely replaced (isSameClassApplier == false && exclusive == true)

// Remove existing highlights, keeping the unselected parts

// Add new range

// Remove the old highlights

// Apply new highlights

// Store the existing selection as character ranges

// Create an array of selected character ranges

// Restore selection

// Convert to the current Highlighter's type, if different from the serialization type

/* 23 */

/**
 * Text range module for Rangy.
 * Text-based manipulation and searching of ranges and selections.
 *
 * Features
 *
 * - Ability to move range boundaries by character or word offsets
 * - Customizable word tokenizer
 * - Ignores text nodes inside <script> or <style> elements or those hidden by CSS display and visibility properties
 * - Range findText method to search for text or regex within the page or within a range. Flags for whole words and case
 *   sensitivity
 * - Selection and range save/restore as text offsets within a node
 * - Methods to return visible text within a range or selection
 * - innerText method for elements
 *
 * References
 *
 * https://www.w3.org/Bugs/Public/show_bug.cgi?id=13145
 * http://aryeh.name/spec/innertext/innertext.html
 * http://dvcs.w3.org/hg/editing/raw-file/tip/editing.html
 *
 * Part of Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Depends on Rangy core.
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

/**
 * Problem: handling of trailing spaces before line breaks is handled inconsistently between browsers.
 *
 * First, a <br>: this is relatively simple. For the following HTML:
 *
 * 1 <br>2
 *
 * - IE and WebKit render the space, include it in the selection (i.e. when the content is selected and pasted into a
 *   textarea, the space is present) and allow the caret to be placed after it.
 * - Firefox does not acknowledge the space in the selection but it is possible to place the caret after it.
 * - Opera does not render the space but has two separate caret positions on either side of the space (left and right
 *   arrow keys show this) and includes the space in the selection.
 *
 * The other case is the line break or breaks implied by block elements. For the following HTML:
 *
 * <p>1 </p><p>2<p>
 *
 * - WebKit does not acknowledge the space in any way
 * - Firefox, IE and Opera as per <br>
 *
 * One more case is trailing spaces before line breaks in elements with white-space: pre-line. For the following HTML:
 *
 * <p style="white-space: pre-line">1
 * 2</p>
 *
 * - Firefox and WebKit include the space in caret positions
 * - IE does not support pre-line up to and including version 9
 * - Opera ignores the space
 * - Trailing space only renders if there is a non-collapsed character in the line
 *
 * Problem is whether Rangy should ever acknowledge the space and if so, when. Another problem is whether this can be
 * feature-tested
 */

// This function must create word and non-word tokens for the whole of the text supplied to it

// Match words and mark characters

// Get trailing space characters for word

// Create token for non-word characters preceding this word

// Create token for trailing non-word characters, if any exist

/* DOM utility functions */

// Create cachable versions of DOM functions

// Test for old IE's incorrect display properties

// Corrects IE's "block" value for table-related elements

// Adpated from Aryeh's code.

// "A whitespace node is either a Text node whose data is the empty string; or

// a Text node whose data consists only of one or more tabs (0x0009), line

// feeds (0x000A), carriage returns (0x000D), and/or spaces (0x0020), and whose

// parent is an Element whose resolved value for "white-space" is "normal" or

// "nowrap"; or a Text node whose data consists only of one or more tabs

// (0x0009), carriage returns (0x000D), and/or spaces (0x0020), and whose

// parent is an Element whose resolved value for "white-space" is "pre-line"."

// "node is a collapsed whitespace node if the following algorithm returns

// true:"

// "If node's data is the empty string, return true."

// "If node is not a whitespace node, return false."

// "If ancestor is null, return true."

/* PROCESSING_INSTRUCTION */

/* COMMENT */

// "A block node is either an Element whose "display" property does not have

// resolved value "inline" or "inline-block" or "inline-table" or "none", or a

// Document, or a DocumentFragment."

// Possibly overengineered caching system to prevent repeated DOM calls slowing everything down

/*
                 <body><p>X  </p><p>Y</p></body>

                 Positions:

                 body:0:""
                 p:0:""
                 text:0:""
                 text:1:"X"
                 text:2:TRAILING_SPACE_IN_BLOCK
                 text:3:COLLAPSED_SPACE
                 p:1:""
                 body:1:"\n"
                 p:0:""
                 text:0:""
                 text:1:"Y"

                 A character is a TRAILING_SPACE_IN_BLOCK iff:

                 - There is no uncollapsed character after it within the visible containing block element

                 A character is a TRAILING_SPACE_BEFORE_BR iff:

                 - There is no uncollapsed character after it preceding a <br> element

                 An element has inner text iff

                 - It is not hidden
                 - It contains an uncollapsed character

                 All trailing spaces (pre-line, before <br>, end of block) require definite non-empty characters to render.
                 */

// Ensure that a block element containing a <br> is considered to have inner text

/*
            This method:
            - Fully populates positions that have characters that can be determined independently of any other characters.
            - Populates most types of space positions with a provisional character. The character is finalized later.
             */

// "If the character at position is from set, append a single space (U+0020) to newdata and advance

// position until the character at position is not from set."

// We also need to check for the case where we're in a pre-line and we have a space preceding a

// line break, because such spaces are collapsed in some browsers

//pos.checkForFollowingLineBreak = true;

// Check the leading space of the next node for the case when a block element follows an inline

// element or text node. In that case, there is an implied line break between the two nodes.

// Resolve leading and trailing spaces, which may involve prepopulating other positions

// Check if character is ignored

// Normalize ignored characters into a string consisting of characters in ascending order of character code

/// Convert back to a string and remove duplicates

// Check if this position's  character is invariant (i.e. not dependent on character options) and return it

// if so

// We need to actually get the character now

// Disallow a collapsible space that is followed by a line break or is the last character

// Allow a trailing space that we've previously determined should be included

// Move onto the next node

// Go into the children next, if children there are

/*
             Next and previous position moving functions that filter out

             - Hidden (CSS visibility/display) elements
             - Script and style elements
             */

// We're skipping this node and all its descendants

// Store text nodes keyed by data, although we may need to truncate this

// Extensions to the rangy.dom utility object

// Adjust the end position to ensure that it is actually reached

// Provides a pair of iterators over text positions, tokenized. Transparently requests more text when next()

// is called and there is no more tokenized text

// Consumes a word and the whitespace beyond it

// Get initial word surrounding initial position and tokenize it

// If we're down to the last token, consume character chunks until we have a word or run out of

// characters to consume

// Merge trailing non-word into next word and tokenize

// Merge leading non-word into next word and tokenize

// If there is a non-breaking space in the innerText, then replace with empty space " " so that it

// matches with the searchTerm. Based on the documentation, search should be performed on

// the visible text of the document

// Check whether the match is now over

// Check whether regex match extends to the end of the range

// Extensions to the Rangy Range object

/*
             Unit can be "character" or "word"
             Options:

             - includeTrailingSpace
             - wordRegex
             - tokenizer
             - collapseSpaceBeforeLineBreak
             */

// Perform any necessary position tweaks

// Tweak the position for the case of a leading space. The problem is that an uncollapsed leading space

// before a block element (for example, the line break between "1" and "2" in the following HTML:

// "1<p>2</p>") is considered to be attached to the position immediately before the block element, which

// corresponds with a different selection position in most browsers from the one we want (i.e. at the

// start of the contents of the block element). We get round this by advancing the position returned to

// the last possible equivalent visible position.

// Extensions to the Rangy Selection object

// Character indexes are relative to the start of node

// Create word options if we're matching whole words only

// Set up options

// We don't ever want trailing spaces for search results

// Create a range representing the search scope if none was provided

// Examine and prepare the search term

// Adjust initial position if it lies outside the search scope

// We've found a match that is not a whole word, so we carry on searching from the point immediately

// after the match

// Nothing found and we can't wrap around, so we're done

// No result found but we're wrapping around and limiting the scope to the unsearched part of the range

// Extensions to the core rangy object

/* 24 */

/**
 * Serializer module for Rangy.
 * Serializes Ranges and Selections. An example use would be to store a user's selection on a particular page in a
 * cookie or local storage and restore it on the user's next visit to the same page.
 *
 * Part of Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Depends on Rangy core.
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

// encodeURIComponent and decodeURIComponent are required for cookie handling

// Checksum for checking whether range can be serialized

// Text node

// Comment

// Creates a string representation of the specified element's contents that is similar to innerHTML but omits all

// attributes and comments and includes child node counts. This is done instead of using innerHTML to work around

// IE <= 8's policy of including element properties in attributes, which ruins things by changing an element's

// innerHTML whenever the user changes an input within the element.

/* 25 */

/**
 * Selection save and restore module for Rangy.
 * Saves and restores user selections using marker invisible elements in the DOM.
 *
 * Part of Rangy, a cross-browser JavaScript range and selection library
 * https://github.com/timdown/rangy
 *
 * Depends on Rangy core.
 *
 * Copyright 2019, Tim Down
 * Licensed under the MIT license.
 * Version: 1.3.3
 * Build date: 2 January 2019
 */

// Create the marker element containing a single invisible character using DOM methods and insert it

// Workaround for issue 17

// Order the ranges by position within the DOM, latest first, cloning the array to leave the original untouched

// Now that all the markers are in place and DOM manipulation over, adjust each range's boundaries to lie

// between its markers

// Ranges are in reverse order of appearance in the DOM. We want to restore earliest first to avoid

// normalization affecting previously restored ranges.

// Ensure current selection is unaffected

/* 26 */

/* 27 */

// Module

/* 28 */

/* 29 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 90 */

// EXTERNAL MODULE: ./src/index.scss

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/connect-mixin.js

/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/

/**
  This is a JavaScript mixin that you can use to connect a Custom Element base
  class to a Redux store. The `stateChanged(state)` method will be called when
  the state is updated.

  Example:

      import { connect } from 'pwa-helpers/connect-mixin.js';

      class MyElement extends connect(store)(HTMLElement) {
        stateChanged(state) {
          this.textContent = state.data.count.toString();
        }
      }
*/

/**
     * The `stateChanged(state)` method will be called when the state is updated.
     */

//# sourceMappingURL=connect-mixin.js.map

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/lazy-reducer-enhancer.js

/**
  A Redux store enhancer that lets you lazy-install reducers after the store
  has booted up. Use this if your application lazy-loads routes that are connected
  to a Redux store.

  Example:

      import { combineReducers } from 'redux';
      import { lazyReducerEnhancer } from 'pwa-helpers/lazy-reducer-enhancer.js';
      import someReducer from './reducers/someReducer.js';

      export const store = createStore(
        (state, action) => state,
        compose(lazyReducerEnhancer(combineReducers))
      );

  Then, in your page/element, you can lazy load a specific reducer with:

      store.addReducers({
        someReducer
      });
*/

//# sourceMappingURL=router.js.map

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/pwa-helpers.js

//# sourceMappingURL=pwa-helpers.js.map

// EXTERNAL MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/redux/es/redux.js

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

// EXTERNAL MODULE: ./node_modules/jwt-decode/lib/index.js

/*#__PURE__*/

// CONCATENATED MODULE: ./src/environments/environment.dev.ts

// CONCATENATED MODULE: ./src/services/http-client.ts

// tslint:disable-next-line: no-empty

// CONCATENATED MODULE: ./src/services/tags.service.ts

/**
     * Updates a tag and reloads all tags from server for state management
     *
     * @param {Tag} tag
     * @memberof TagsService
     */

// EXTERNAL MODULE: ./node_modules/uuid/v4.js

// Update redux

// Create tag for directory

// EXTERNAL MODULE: ./node_modules/uuid/index.js

// CONCATENATED MODULE: ./src/services/marker.service.ts

//await this.emitSocket('createMark', mark);

/**
     * Adds the tags of the current bookmark to the created mark
     *
     * @param {Mark} mark
     * @memberof MarkerService
     */

// CONCATENATED MODULE: ./src/helper/bookmarkHelper.ts

// Check if URL is pdf format => Return the filename by splitting the URL

// Split by forward- or backslash

// Remove spaces %20 for windows

// CONCATENATED MODULE: ./src/services/bookmark.service.ts

/**
 * Hand a tab as a param to set selected tag
 *
 * @export
 * @param {Tab} activeView
 * @param {string} [tag]
 */

/**
     * If tags of bookmark are changing they also have to be stored and saved in mark
     *
     * @param {Bookmark} bookmark
     * @memberof BookmarkService
     */

// CONCATENATED MODULE: ./src/store/actions.ts

// Init marks

// CONCATENATED MODULE: ./src/services/jwt.service.ts

/**
     * Tries to get the jwt-token either from the chrome storage or localstorage
     *
     * @returns {Promise<JwtPayload>}
     * @memberof JwtService
     */

// CONCATENATED MODULE: ./src/store/reducer.ts

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

// Old bookmark is necessary to identify if tag was removed or added

// If tag was removed

// If tag was added

// Update tags of mark

// @ts-ignore

/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */

/**
 * An updateable Template that tracks the location of dynamic parts.
 */

/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */

// Edge needs all 4 parameters present; IE11 needs 3rd parameter to be

// null

// Keeps track of the last index associated with a part. We try to delete

// unnecessary nodes, but we never want to associate two different parts

// to the same index. They must have a constant node between.

/* Node.ELEMENT_NODE */

// Per

// https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,

// attributes are not guaranteed to be returned in document order.

// In particular, Edge/IE can return them out of order, so we cannot

// assume a correspondance between part index and attribute index.

// Get the template literal section leading up to the first

// expression in this attribute

// Find the attribute name

/* Node.TEXT_NODE */

// Generate a new text node for each literal section

// These nodes are also used as the markers for node parts

// If there's no text, we must insert a comment to mark our place.

// Else, we can trust it will stick around after cloning.

// We have a part for each match found

/* Node.COMMENT_NODE */

// Add a new marker node to be the startNode of the Part if any of

// the following are true:

//  * We don't have a previousSibling

//  * The previousSibling is already the start of a previous part

// If we don't have a nextSibling, keep this node so we have an end.

// Else, we can remove it to save future costs.

// Comment node has a binding marker inside, make an inactive part

// The binding won't work, but subsequent bindings will

// TODO (justinfagnani): consider whether it's even worth it to

// make bindings in comments work

// Remove text binding nodes after the walk to not disturb the TreeWalker

// Allows `document.createComment('')` to be renamed for a

// small manual size-savings.

//# sourceMappingURL=template.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-instance.js

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */

/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */

// When using the Custom Elements polyfill, clone the node, rather than

// importing it, to keep the fragment in the template's document. This

// leaves the fragment inert so custom elements won't upgrade and

// potentially modify their contents by creating a polyfilled ShadowRoot

// while we traverse the tree.

// Loop through all the nodes and parts of a template

// Consecutive Parts may have the same node index, in the case of

// multiple bound attributes on an element. So each iteration we either

// increment the nodeIndex, if we aren't on a node with a part, or the

// partIndex if we are. By not incrementing the nodeIndex when we find a

// part, we allow for the next part to be associated with the current

// node if neccessasry.

//# sourceMappingURL=template-instance.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-result.js

/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */

/**
     * Returns a string of HTML used to create a `<template>` element.
     */

// This exec() call does two things:

// 1) Appends a suffix to the bound attribute name to opt out of special

// attribute value parsing that IE11 and Edge do, like for style and

// many SVG attributes. The Template class also appends the same suffix

// when looking up attributes to create Parts.

// 2) Adds an unquoted-attribute-safe marker for the first expression in

// an attribute. Subsequent attribute expressions will use node markers,

// and this is safe since attributes with multiple expressions are

// guaranteed to be quoted.

// We're starting a new bound attribute.

// Add the safe attribute suffix, and use unquoted-attribute-safe

// marker.

/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */

//# sourceMappingURL=template-result.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/parts.js

/**
 * Sets attribute values for AttributeParts, so that the value is only set once
 * even if there are multiple parts for an attribute.
 */

/**
     * Creates a single part. Override this to create a differnt type of part.
     */

// tslint:disable-next-line:no-any

// If the value is a not a directive, dirty the committer so that it'll

// call setAttribute. If the value is a directive, it'll dirty the

// committer if it calls setValue().

/**
     * Inserts this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and
     * its next sibling must be static, unchanging nodes such as those that appear
     * in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Appends this part after `ref`
     *
     * This part must be empty, as its contents are not automatically moved.
     */

// Fallback, will render the string representation

// If we only have a single text node between the markers, we can just

// set its value, rather than replacing it.

// TODO(justinfagnani): Can we just check if this.value is primitive?

// Make sure we propagate the template processor from the TemplateResult

// so that we use its syntax extension, etc. The template factory comes

// from the render function options so that it can control template

// caching and preprocessing.

// For an Iterable, we create a new InstancePart per item, then set its

// value to the item. This is a little bit of overhead for every item in

// an Iterable, but it lets us recurse easily and efficiently update Arrays

// of TemplateResults that will be commonly returned from expressions like:

// array.map((i) => html`${i}`), by reusing existing TemplateInstances.

// If _value is an array, then the previous render was of an

// iterable and _value will contain the NodeParts from the previous

// render. If _value is not an array, clear this part and make a new

// array for NodeParts.

// Lets us keep track of how many items we stamped so we can clear leftover

// items from a previous render

// Try to reuse an existing part

// If no existing part, create a new one

// Truncate the parts array so _value reflects the current state

/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */

/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */

// Detect event listener options support. If the `capture` property is read

// from the options object, then options are supported. If not, then the thrid

// argument to add/removeEventListener is interpreted as the boolean capture

// value so we should only pass the `capture` property.

// We copy options because of the inconsistent behavior of browsers when reading

// the third argument of add/removeEventListener. IE11 doesn't support options

// at all. Chrome 41 only reads `capture` if the argument is an object.

//# sourceMappingURL=parts.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/default-template-processor.js

/**
 * Creates Parts when a template is instantiated.
 */

/**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */

/**
     * Create parts for a text-position binding.
     * @param templateFactory
     */

//# sourceMappingURL=default-template-processor.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-factory.js

/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */

// If the TemplateStringsArray is new, generate a key from the strings

// This key is shared between all templates with identical content

// Check if we already have a Template for this key

// If we have not seen this key before, create a new Template

// Cache the Template for this key

// Cache all future queries for this TemplateStringsArray

//# sourceMappingURL=template-factory.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/render.js

//# sourceMappingURL=render.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js

/**
 *
 * Main lit-html module.
 *
 * Main exports:
 *
 * -  [[html]]
 * -  [[svg]]
 * -  [[render]]
 *
 * @module lit-html
 * @preferred
 */

/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */

// TODO(justinfagnani): remove line when we get NodePart moving methods

// IMPORTANT: do not change the property name or the assignment expression.

// This line will be used in regexes to search for lit-html usage.

// TODO(justinfagnani): inject version number at build time

/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */

/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */

/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */

// End removal if stepped past the removing node

// A node to remove was found in the template

// Track node we're removing

// When removing, increment count by which to adjust subsequent part indices

// If part is in a removed node deactivate it by setting index to -1 or

// adjust the index as needed.

// go to the next active part.

/* Node.DOCUMENT_FRAGMENT_NODE */

//# sourceMappingURL=modify-template.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/shady-render.js

/**
 * Module to add shady DOM/shady CSS polyfill support to lit-html template
 * rendering. See the [[render]] method for details.
 *
 * @module shady-render
 * @preferred
 */

// Get a key to lookup in `templateCaches`.

/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */

// Move styles out of rendered DOM and store.

// If there are no styles, skip unnecessary work

// Ensure prepareTemplateStyles is called to support adding

// styles via `prepareAdoptedCssText` since that requires that

// `prepareTemplateStyles` is called.

// Collect styles into a single style. This helps us make sure ShadyCSS

// manipulations will not prevent us from being able to fix up template

// part indices.

// NOTE: collecting styles is inefficient for browsers but ShadyCSS

// currently does this anyway. When it does not, this should be changed.

// Remove styles from nested templates in this scope.

// IE 11 doesn't support the iterable param Set constructor

// And then put the condensed style into the "root" template passed in as

// `template`.

/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */

// If there's no refNode, then put node at end of template.

// No part indices need to be shifted in this case.

// If we've inserted the node, simply adjust all subsequent parts

// Note, it's important that ShadyCSS gets the template that `lit-html`

// will actually render so that it can update the style inside when

// needed (e.g. @apply native Shadow DOM case).

// When in native Shadow DOM, re-add styling to rendered content using

// the style ShadyCSS produced.

// When not in native Shadow DOM, at this point ShadyCSS will have

// removed the style from the lit template and parts will be broken as a

// result. To fix this, we put back the style node ShadyCSS removed

// and then tell lit to remove that node from the template.

// NOTE, ShadyCSS creates its own style so we can safely add/remove

// `condensedStyle` here.

//# sourceMappingURL=shady-render.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lib/updating-element.js

/**
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */

// if the value is `null` or `undefined` pass this through

// to allow removing/no change behavior.

/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */

/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 */

/**
         * Map with keys for any properties that have changed since the last
         * update cycle with previous values.
         */

/**
         * Map with keys of properties that should be reflected when updated.
         */

/**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     */

// note: piggy backing on this to ensure we're finalized.

// Use forEach so this works even if for/of loops are compiled to for loops

// expecting arrays

/**
     * Ensures the private `_classProperties` property metadata is created.
     * In addition to `finalize` this is also called in `createProperty` to
     * ensure the `@property` decorator can add property metadata.
     */

/** @nocollapse */

// ensure private storage for property declarations.

// NOTE: Workaround IE11 not supporting Map constructor argument.

/**
     * Creates a property accessor on the element prototype if one does not exist.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     * @nocollapse
     */

// Do not generate an accessor if the prototype already has one, since

// it would be lost otherwise and that would never be the user's intention;

// Instead, we expect users to call `requestUpdate` themselves from

// user-defined accessors. Note that if the super has an accessor we will

// still overwrite it

// Note, since this can be called by the `@property` decorator which

// is called before `finalize`, we ensure storage exists for property

// metadata.

// tslint:disable-next-line:no-any no symbol in index

/**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     * @nocollapse
     */

// finalize any superclasses

// make any properties

// Note, only process "own" properties since this element will inherit

// any properties defined on the superClass, and finalization ensures

// the entire prototype chain is finalized.

// initialize Map populated in observedAttributes

// support symbols in properties (IE11 does not support this)

// This for/of is ok because propKeys is an array

// note, use of `any` is due to TypeSript lack of support for symbol in

// index types

/**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */

/**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     * @nocollapse
     */

/**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's
     * `converter` or `converter.fromAttribute` property option.
     * @nocollapse
     */

/**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     * @nocollapse
     */

/**
     * Performs element initialization. By default captures any pre-set values for
     * registered properties.
     */

// ensures first update will be caught by an early access of `updateComplete`

/**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */

/**
     * Applies previously saved instance properties.
     */

// Ensure first connection completes an update. Updates cannot complete before

// connection and if one is pending connection the `_hasConnectionResolver`

// will exist. If so, resolve it to complete the update, otherwise

// requestUpdate.

/**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */

/**
     * Synchronizes property values when attributes change.
     */

// an undefined value does not change the attribute.

// Track if the property is being reflected to avoid

// setting the property again via `attributeChangedCallback`. Note:

// 1. this takes advantage of the fact that the callback is synchronous.

// 2. will behave incorrectly if multiple attributes are in the reaction

// stack at time of calling. However, since we process attributes

// in `update` this should not be possible (or an extreme corner case

// that we'd like to discover).

// mark state reflecting

// mark state not reflecting

// Use tracking info to avoid deserializing attribute value if it was

// just set from a property setter.

/**
     * This private version of `requestUpdate` does not access or return the
     * `updateComplete` promise. This promise can be overridden and is therefore
     * not free to access.
     */

// If we have a property key, perform property update steps.

// Add to reflecting properties set.

// Note, it's important that every change has a chance to add the

// property to `_reflectingProperties`. This ensures setting

// attribute + property reflects correctly.

// Abort the request if the property should not be considered changed.

/**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */

/**
     * Sets up the element to asynchronously update.
     */

// Mark state updating...

// Ensure any previous update has resolved before updating.

// This `await` also ensures that property changes are batched.

// Ignore any previous errors. We only care that the previous cycle is

// done. Any error should have been handled in the previous update.

// Make sure the element has connected before updating.

// If `performUpdate` returns a Promise, we await it. This is done to

// enable coordinating updates with a scheduler. Note, the result is

// checked to avoid delaying an additional microtask unless we need to.

/**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * You can override this method to change the timing of updates. If this
     * method is overridden, `super.performUpdate()` must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```
     * protected async performUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.performUpdate();
     * }
     * ```
     */

// Mixin instance properties once, if they exist.

// Prevent `firstUpdated` and `updated` from running when there's an

// update exception.

// Ensure element can accept additional updates after an exception.

/**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update. This getter can be implemented to
     * await additional state. For example, it is sometimes useful to await a
     * rendered element before fulfilling this Promise. To do this, first await
     * `super.updateComplete` then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */

/**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

// Use forEach so this works even if for/of loops are compiled to for

// loops expecting arrays

/**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
 * Marks class as having finished creating properties.
 */

//# sourceMappingURL=updating-element.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lib/decorators.js

// This callback is called once the class is otherwise fully defined

// When decorating an accessor, pass it through and add property metadata.

// Note, the `hasOwnProperty` check in `createProperty` ensures we don't

// stomp over the user's accessor.

// When @babel/plugin-proposal-decorators implements initializers,

// do this instead of the initializer below. See:

// https://github.com/babel/babel/issues/9260 extras: [

//   {

//     kind: 'initializer',

//     placement: 'own',

//     initializer: descriptor.initializer,

//   }

// ],

// tslint:disable-next-line:no-any decorator

/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A `PropertyDeclaration` may optionally be
 * supplied to configure property features.
 *
 * @ExportDecoratedItems
 */

/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

// Note, this is a getter so that it's lazy. In practice, this means

// stylesheets are not created until the first element instance is made.

// Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet

// is constructable.

/**
 * Wrap a value for interpolation in a css tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */

//# sourceMappingURL=css-tag.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lit-element.js

// This line will be used in regexes to search for LitElement usage.

/** Deeply flattens styles array. Uses native flat if available. */

/**
 * Minimal implementation of Array.prototype.flat
 * @param arr the array to flatten
 * @param result the accumlated result
 */

// Prepare styling that is stamped at first render time. Styling

// is built from user provided `styles` or is inherited from the superclass.

// Take care not to call `this.styles` multiple times since this generates

// new CSSResults each time.

// TODO(sorvell): Since we do not cache CSSResults by input, any

// shared styles will generate new stylesheet objects, which is wasteful.

// This should be addressed when a browser ships constructable

// stylesheets.

// Array.from does not work on Set in IE

/**
     * Performs element initialization. By default this calls `createRenderRoot`
     * to create the element `renderRoot` node and captures any pre-set values for
     * registered properties.
     */

// Note, if renderRoot is not a shadowRoot, styles would/could apply to the

// element's getRootNode(). While this could be done, we're choosing not to

// support this now since it would require different logic around de-duping.

/**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */

/**
     * Applies styling to the element shadowRoot using the `static get styles`
     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
     * available and will fallback otherwise. When Shadow DOM is polyfilled,
     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
     * is available but `adoptedStyleSheets` is not, styles are appended to the
     * end of the `shadowRoot` to [mimic spec
     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
     */

// There are three separate cases here based on Shadow DOM support.

// (1) shadowRoot polyfilled: use ShadyCSS

// (2) shadowRoot.adoptedStyleSheets available: use it.

// (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after

// rendering

// This must be done after rendering so the actual style insertion is done

// in `update`.

// Note, first update/render handles styleElement so we only call this if

// connected after first update.

/**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * * @param _changedProperties Map of changed properties with old values
     */

// When native Shadow DOM is used but adoptedStyles are not supported,

// insert styling after rendering to ensure adoptedStyles have highest

// priority.

/**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */

/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 */

/**
 * Render method used to render the lit-html TemplateResult to the element's
 * DOM.
 * @param {TemplateResult} Template to render.
 * @param {Element|DocumentFragment} Node into which to render.
 * @param {String} Element name.
 * @nocollapse
 */

// When performing first scope render,

// (1) We've rendered into a fragment so that there's a chance to

// `prepareTemplateStyles` before sub-elements hit the DOM

// (which might cause them to render based on a common pattern of

// rendering in a custom element's `connectedCallback`);

// (2) Scope the template with ShadyCSS one time only for this scope.

// (3) Render the fragment into the container and make sure the

// container knows its `part` is the one we just rendered. This ensures

// DOM will be re-used on subsequent renders.

// After elements have hit the DOM, update styling if this is the

// initial render to this container.

// This is needed whenever dynamic changes are made so it would be

// safest to do every render; however, this would regress performance

// so we leave it up to the user to call `ShadyCSSS.styleElement`

// for dynamic changes.

//# sourceMappingURL=lit-element.js.map

// EXTERNAL MODULE: ./src/helper/rangy-updated/lib/rangy-classapplier.js

// EXTERNAL MODULE: ./src/helper/rangy-updated/lib/rangy-highlighter.js

// CONCATENATED MODULE: ./src/helper/markerHelper.ts

//const markElement = markWithRangy(mark);

/**
 * Adds the style for the mark element.
 *
 */

// CONCATENATED MODULE: ./src/components/app.component.ts

/**
 * Creates the mark element to highlight text
 *
 * @param {Range} [range]
 * @param {Mark} [mark]
 * @returns
 */

/**
 * If @param text is given the mark is created by the context menu
 *
 * @export
 * @param {string} [text]
 * @returns {Mark}
 */

// If selection is made by my-menu popup

// if (selection.toString()) {

// Mark is created by context menu

// else if (text) {

//   return createContextMark(text)

// }

/**
 * Creates a mark from the context-menu by handing text instead of using getSelection()
 *
 * @export
 * @param {string} text
 * @returns {Mark}
 */

/**
 * Creates the mark in the DOM. Afterwards it listenes for a deletion event to remove it.
 *
 * @param {HTMLElement} markElement
 * @param {Mark} mark
 */

// Listen for state changes and delete mark from DOM if it got removed

// Unwraps the mark element

// move all children out of the element

// remove the empty element

/**
 * Returns the StartContainer or EndContainer to recreate the range of the given mark
 *
 * @export
 * @param {HTMLElement} container
 * @param {Mark} mark
 * @param {boolean} start true = searchs for StartContainer; false = searchs for EndContainer
 * @returns {HTMLElement}
 */

/**
 * Returns all text nodes under an element
 *
 * @export
 * @param {Node} node
 * @returns {Node[]}
 */

// tslint:disable-next-line: prefer-for-of

/**
         * Can be set to true to hide side-bar icon. E.g. in full screen mode
         *
         * @memberof WebMarker
         */

/**
         * Set width of menu in px to calculate center.
         * Only for making new marks.
         *
         * @memberof WebMarker
         */

/**
     * Hides the icon on fullscreen mode
     *
     * @memberof WebMarker
     */

// Chrome extension not available

/**
     * Listens for click and selection events to show or hide the marker
     *
     * @memberof WebMarker
     */

/**
     *  Sets the position of the marker for a click event.
     *  Gets the center from the bounds of the createdRange
     *
     * @param {MouseEvent} e
     * @memberof WebMarker
     */

/**
     *  This method loads all marks for current url from server
     *
     * @todo Load only marks with current url from server
     *
     * @memberof WebMarker
     */

/**
     *  Scroll to mark if there is a scrollY param in query url.
     *  SetTimeout to put at the end of event Loop
     * @memberof WebMarker
     */

// CONCATENATED MODULE: ./src/components/my-marker/my-marker.component.ts

/**
         *  Necessary to abort hide animation when user enters mark again
         *
         * @memberof MyMarkerElement
         */

//await this.initSocket();

//this.handleSockets();

/**
     *  Sets position of this component so that it is centralized above mark-element
     *
     * @memberof MyMarkerElement
     */

// this.style.left = rectLines.length === 1 ? this.parentElement.offsetLeft + 'px' : this.parentElement.parentElement.offsetLeft + 'px';

/**
     * Iterates over all rectlines and returns the maximum width of line
     *
     * @param {DOMRectList} rectLines
     * @returns
     * @memberof MyMarkerElement
     */

/**
     * Iterates over all clientRect rows and sums up all heights
     *
     * @returns
     * @memberof MyMarkerElement
     */

/**
     *  Register Listener to show and hide hovering menu.
     *  Abortes hiding when user enters element again after 300ms
     *
     * @memberof MyMarkerElement
     */

// CONCATENATED MODULE: ./src/environments/environment.prod.ts

// CONCATENATED MODULE: ./src/helper/router.ts

// CONCATENATED MODULE: ./src/components/my-menu/my-menu.component.ts

/**
     *  Width is set dynamically because it it necessary to calculcate center in parent element
     *
     * @memberof MyMarkElement
     */

/**
     * This method creates the mark in the browser. The id will be given to element after server created element.
     *
     * @param {MouseEvent}
     * @memberof MyMarkElement
     */

/**
     * Deletes the mark in state manegement. The markerHelper is listening for
     * state changes to remove the mark from the DOM
     *
     * @memberof MyMarkElement
     */

/* tslint:disable: max-line-length */

// CONCATENATED MODULE: ./src/components/bronco-chip/app.component.ts

/**
 * Modern chip
 * @event clicked - Dispatches when chip is clicked.
 * @event removed - Dispatched when removed is clicked.
 * @slot - Default content.
 * @cssprop --primary-color - Background color
 * @cssprop --height - Height of the chip
 *
 */

/**
     * Modern chip
     * @event clicked - Dispatches when chip is clicked.
     * @event removed - Dispatched when removed is clicked.
     * @slot - Default content.
     * @cssprop --primary-color - Background color
     * @cssprop --height - Height of the chip
     *
     */

/**
         *
         * If true, trash icon will be shown with red background
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * If true, trash icon will not be shown
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * If value, a badge with number can be shown
         * @type {number}
         * @memberof BroncoChip
         */

/**
         *
         * Makes the chip outlined
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         * Enables the outline effect after clicking
         * @type {boolean}
         * @memberof BroncoChip
         */

// CONCATENATED MODULE: ./src/components/bronco-chip-list/app.component.ts

/**
 * Modern chip
 * @event tagsChanged - Dispatched when tags changed and returns array of tags
 * @event submitTriggered - Submit event when user enters 'ENTER' twise
 * @slot - Default content.
 * @cssprop --bg-color - Background color
 * @cssprop --color - Font color
 * @cssprop --font-size - Font size
 * @cssprop --min-height - Min-height of the chip-list
 * @cssprop --primary-color - Primary color which is set on focus
 *
 */

/**
     * Modern chip
     * @event tagsChanged - Dispatched when tags changed and returns array of tags
     * @event submitTriggered - Submit event when user enters 'ENTER' twise
     * @slot - Default content.
     * @cssprop --bg-color - Background color
     * @cssprop --color - Font color
     * @cssprop --font-size - Font size
     * @cssprop --min-height - Min-height of the chip-list
     * @cssprop --primary-color - Primary color which is set on focus
     *
     */

/**
         * Array of tags as strings
         *
         * @memberof BroncoChipList
         */

/**
         * This value will be set from the autoComplete component.
         * When the user submits and this value is truthy, it will be used to add the tag
         *
         * @memberof BroncoChipList
         */

/**
         * Property to set focus on input initially
         *
         * @memberof BroncoChipList
         */

/**
         * Property to prevent to fast deleting. So that user has to click backspace twice.
         *
         * @memberof BroncoChipList
         */

/**
         * Property to trigger submit after entering ENTER twice
         *
         * @memberof BroncoChipList
         */

/**
         * Current value for input for auto-complete
         *
         * @memberof BroncoChipList
         */

/**
     * Listen to keyboard event to either add or remove tags
     * Tags are being added when user enters space or enter
     *
     * @param {KeyboardEvent} e
     * @memberof BroncoChipList
     */

// Stop Propagation not for arrow doww / arrow up and enter because auto complete listens for those events

// Either take the current autoComplete value or the inputElement value

/**
     * Adds a tag if current value is not empty.
     * It splits the current value by space
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

// Map array to lower case to check case insensitive if tag already exists

/**
     * Deletes a tag if it is already marked as deleted.
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

/**
     * Event triggered by the custom auto-complete component.
     *
     * If user clicks on autocomplete it has to be manually added. If user presses enter it will be captured by
     * the event listener of the inputElement.
     *
     * @param {CustomEvent} e
     * @param {boolean} [isClick]
     * @memberof BroncoChipList
     */

// CONCATENATED MODULE: ./src/components/bronco-chip-list/auto-complete/auto-complete.component.ts

/**
         * Maximum of shown suggestions in dropdown
         *
         * @type {5}
         * @memberof HeaderToggleComponent
         */

// Key arrow down

// Key arrow up

/**
     * Remove event handler
     *
     * @memberof HeaderToggleComponent
     */

// this.selectedIndex = -1;

// CONCATENATED MODULE: ./src/components/bronco-chip-list/chip-list-item/chip-list-item.component.ts

/**
         * Active, when user selects item in autocomplete
         *
         * @memberof ChipListItemComponent
         */

/**
     * Check if the tag is a directory or tag
     *
     * @returns
     * @memberof ChipListItemComponent
     */

// CONCATENATED MODULE: ./src/services/user.service.ts

/**
     * Signs the user in and saves the jwtToken in the jwtService.
     *
     * @returns {Promise<string>}
     * @memberof UserService
     */

/**
     * Signs up the user. A jwt token will be the result so that the user gets logged in directly
     *
     * @returns {Promise<string>}
     * @memberof UserService
     */

// CONCATENATED MODULE: ./src/components/pop-up/app.component.ts

/**
   * Function called by content script, when user logs out in browser action popup
   *
   * @memberof LobbyContainer
   */

// html`<sign-in @login=${async () => await this.loadUserData()}></sign-in>`}

// CONCATENATED MODULE: ./src/components/pop-up/tab-bar/tab-bar.component.ts

/**
 *
 * This component is a liquid tabbar 'stolen' from https://codepen.io/marius2502/pen/rNBoeBz.
 *
 * It allows the user to login.
 *
 * @export
 * @class SignInComponent
 * @extends {LitElement}
 */

/**
     *
     * This component is a liquid tabbar 'stolen' from https://codepen.io/marius2502/pen/rNBoeBz.
     *
     * It allows the user to login.
     *
     * @export
     * @class SignInComponent
     * @extends {LitElement}
     */

// CONCATENATED MODULE: ./src/components/pop-up/action-toolbar/action-toolbar.component.ts

/**
         * When set to true, it hides the delete icon
         *
         * @memberof BookmarkElementComponent
         */

/**
     * Either @event goToMatk or @event deleted
     *
     * @param {string} eventName
     * @memberof BookmarkElementComponent
     */

// CONCATENATED MODULE: ./src/components/lobby-container/sign-up/sign-up.component.ts

// CONCATENATED MODULE: ./src/components/lobby-container/sign-in/sign-in.component.ts

// CONCATENATED MODULE: ./src/components/lobby-container/app.component.ts

/**
 *
 * This component is the sign-in component.
 *
 * It allows the user to login.
 *
 * @export
 * @class LobbyContainer
 * @extends {LitElement}
 */

/**
     *
     * This component is the sign-in component.
     *
     * It allows the user to login.
     *
     * @export
     * @class LobbyContainer
     * @extends {LitElement}
     */

/**
     * Notifies content script that user loggedIn successfully
     *
     * @memberof LobbyContainer
     */

// CONCATENATED MODULE: ./src/components/lobby-container/account-overview/account-overview.component.ts

// CONCATENATED MODULE: ./src/components/bubbles-animation/bubbles-animation.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/mark-badge/mark-badge.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/header-toggle/header-toggle.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/tree-view/tree-view.component.ts

// CONCATENATED MODULE: ./src/helper/urlHelper.ts

// CONCATENATED MODULE: ./src/components/pop-up/accordion-view/accordion-view.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/origin-overview/origin-overview.component.ts

/**
   * Filter origins by search
   *
   * @memberof TagsViewComponent
   */

// CONCATENATED MODULE: ./src/components/pop-up/origin-element/origin-element.component.ts

/**
     * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be completed.
     *
     * @memberof TreeViewComponent
     */

/**
         * This method toggles the dropdown icon of the element.
         * Fix: If it is the fist item in the list, this is not necessary because it disappears otherwise.
         */

// CONCATENATED MODULE: ./src/components/pop-up/directory-overview/directory-overview.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/directory-element/directory-element.component.ts

/**
         * True, when user drags tag inside of this directory
         *
         * @memberof DirectoryOverviewComponent
         */

//  this.dragActive = store.getState().dragMode;

// Allow tags to be dragged inside of this directory and toggleDragActive to show css effect

/**
     *Tags can be dropped in this directory. The belonging tag will be read out in dataTransfer object and
     * and the new directory for the tag is saved in the server
     * @param {DragEvent} e
     * @memberof DirectoryOverviewComponent
     */

// Only set id when id does not equal the directoryId

// If directory element is dragged one directory level back

// CONCATENATED MODULE: ./src/components/pop-up/add-directory-element/add-directory-element.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/remove-directory-element/remove-directory-element.component.ts

/**
       * True, when user drags tag inside of this directory
       *
       * @memberof RemoveDirectoryComponent
       */

// Allow tags to be dragged inside of this component

/**
     * Directories can be dropped in this component to delete them
     *
     * @param {DragEvent} e
     * @memberof RemoveDirectoryComponent
     */

/**
     * After deleting a category all tags, which are somewhere in directory (all subfolders) have to be updated
     *
     * @memberof RemoveDirectoryComponent
     */

// Update related tags

// Update tags, which were in subfolder of deleted directory

// CONCATENATED MODULE: ./src/components/pop-up/bookmark-overview/bookmark-overview.component.ts

// Filter if search value is given

// Prevents to update too much. Checks if update got interrupted by user input

// CONCATENATED MODULE: ./src/components/pop-up/mark-element/mark-element.component.ts

/**
*
* This component shows one single mark
*
* It allows the user to login.
*
* @export
* @class MarkElementComponent
* @extends {LitElement}
*/

/**
    *
    * This component shows one single mark
    *
    * It allows the user to login.
    *
    * @export
    * @class MarkElementComponent
    * @extends {LitElement}
    */

// CONCATENATED MODULE: ./src/helper/dateHelper.ts

// CONCATENATED MODULE: ./src/components/pop-up/bookmark-element/bookmark-element.component.ts

/**
         * Either the dropdown is active or not
         *
         * @memberof BookmarkElementComponent
         */

//this.bookmark ? this.tags = this.bookmark.tags : '';

/**
    * Creates a new bookmark when clicking on bookmark icon
    *
    * @memberof BookmarkElementComponent
    */

// await this.updateBookmark();

/**
    * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be
    completed.
    *
    * @memberof TreeViewComponent
    */

// CONCATENATED MODULE: ./src/components/pop-up/mark-overview/mark-overview.component.ts

/**
*
* This shows all marks and can be filtered by the filterValue
*
* @export
* @class MarkOverviewComponent
* @extends {LitElement}
*/

/**
    *
    * This shows all marks and can be filtered by the filterValue
    *
    * @export
    * @class MarkOverviewComponent
    * @extends {LitElement}
    */

/**
         * When set to true, only marks for current page are shown
         *
         * @memberof MainComponentComponent
         */

// Filter for current page if mode is set to currentPage

// Filter for current bookmark, if given

// CONCATENATED MODULE: ./src/components/pop-up/tags-view/tags-view.component.ts

/**
    * Find related tags, which are inserted in combination with selected tag
    *
    * @returns
    * @memberof TagsViewComponent
    */

/**
    * Toggle tag in state management
    *
    * @param {string} tag
    * @memberof TagsViewComponent
    */

/**
     * Tags can be dragged in directories. The belonging tagName is saved in dataTransfer object.
     *
     * @param {DragEvent} e
     * @param {string} tag
     * @memberof TagsViewComponent
     */

/**
     * Filter tags by search
     *
     * @memberof TagsViewComponent
     */

// CONCATENATED MODULE: ./src/components/pop-up/search-view/search-view.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/main-component/main-component.component.ts

/**
*
* This component is the sign-in component.
*
* It allows the user to login.
*
* @export
* @class MarkOverviewComponent
* @extends {LitElement}
*/

/**
    *
    * This component is the sign-in component.
    *
    * It allows the user to login.
    *
    * @export
    * @class MarkOverviewComponent
    * @extends {LitElement}
    */

/**
        * Current active Tab, saved in store
        *
        * @memberof MarkOverviewComponent
        */

/**
         * If true, the animation is active
         *
         * @memberof MarkOverviewComponent
         */

/**
       * Can be set to true to hide side-bar icon. E.g. in full screen mode
       *
       * @memberof WebMarker
       */

/**
    * Function called by extended connect method from pwa-helper, when state changed
    *
    * @memberof MarkOverviewComponent
    */

/**
  * Hides the icon on fullscreen mode
  *
  * @memberof WebMarker
  */

/**
     * Wati for animation of side-menu to finish
     *
     * @memberof MarkOverviewComponent
     */
