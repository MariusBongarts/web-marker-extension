/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

/* 1 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 2 */

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

// all

// specific event

// remove all handlers

// remove specific handler

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

/* 3 */

/**
 * Module dependencies.
 */

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */

/**
 * Current protocol version.
 */

/**
 * Packet types.
 */

/**
 * Async array map using after
 */

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

/**
 * Encode packet helpers for binary types
 */

// might be an object with { base64: true, data: dataAsBase64String }

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

// packet data is an object { base64: true, data: dataAsBase64String }

// Sending data as a utf-8 string

// data fragment is optional

// iPhone Safari doesn't let you apply with typed arrays

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

// String data

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

// parser error - ignoring payload

// parser error in individual packet - ignoring payload

// advance cursor

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

// string/binary identifier + separator = 2

// not true binary

/**
 * Encode as Blob
 */

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

// 310 = char length of Number.MAX_VALUE

// iPhone Safari doesn't let you apply to typed arrays

/* 4 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 5 */

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// Copy bytes to buffer, if provided

/* 6 */

/* WEBPACK VAR INJECTION */

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

// This hackery is required for IE8/9, where

// the `console.log` function doesn't have 'apply'

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

// The final "%c" is somewhat tricky, because there could be other

// arguments passed either before or after the %c, so we need to

// figure out the correct index to insert the CSS into

// We only are interested in the *last* %c

// (the user may have provided their own)

// Swallow

// XXX (@Qix-) should we be logging these?

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity

// NB: In an Electron preload script, document will be defined but not fully

// initialized. Since we know we're in Chrome, we'll just detect this case

// explicitly

// Internet Explorer and Edge do not support colors.

// Is webkit? http://stackoverflow.com/a/16459606/376773

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// Is firebug? http://stackoverflow.com/a/398120/376773

// Is firefox >= v31?

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// Double check webkit in userAgent just in case we are in a worker

// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context

// The Browser also has localStorage in the global context.

/**
 * Colors.
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/* 7 */

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

/* 8 */

/* 9 */

/* 10 */

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

/**
 * Protocol version.
 *
 * @api public
 */

/**
 * Packet types.
 *
 * @api public
 */

/**
 * Packet type `connect`.
 *
 * @api public
 */

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

/**
 * Packet type `event`.
 *
 * @api public
 */

/**
 * Packet type `ack`.
 *
 * @api public
 */

/**
 * Packet type `error`.
 *
 * @api public
 */

/**
 * Packet type 'binary event'
 *
 * @api public
 */

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

/**
 * Encoder constructor.
 *
 * @api public
 */

/**
 * Decoder constructor.
 *
 * @api public
 */

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

// first is type

// attachments if we have them

// json data

// if we have a namespace other than `/`

// we append it followed by a comma `,`

// immediately followed by the id

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

/**
 * Mix in `Emitter` with Decoder.
 */

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

// add packet info to beginning of data list

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

// look up type

// look up attachments if type binary

// look up namespace (if any)

// look up id

// look up json data

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

// binary packet's json

// no attachments, labeled binary but no binary data to follow

// non-binary full packet

// raw binary data

// received final buffer

// done with buffer list

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

/* 11 */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */

// Return an augmented `Uint8Array` instance, for best performance

// Fallback: Return an object instance of the Buffer class

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

// Common case.

// this throws if `array` is not a valid ArrayBuffer

// Writing a hex string, for example, that contains invalid characters will

// cause everything after the first invalid character to be ignored. (e.g.

// 'abxxcd' will be treated as 'ab')

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

// Note: cannot use `length < kMaxLength()` here because that fails when

// length is NaN (which is otherwise coerced to zero.)

// Use a for loop to avoid recursion

// assume utf8

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

//

// Arguments:

// - buffer - a Buffer to search

// - val - a string, Buffer, or number

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - encoding - an optional encoding, relevant is val is a string

// - dir - true for indexOf, false for lastIndexOf

// Empty buffer means no match

// Normalize byteOffset

// Coerce to Number.

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize val

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Special case: looking for empty string/buffer always fails

// Search for a byte value [0-255]

// must be an even number of digits

// Node's code seems to be doing this and not & 0x7F..

// we did not generate a valid codePoint so insert a

// replacement char (U+FFFD) and advance only 1 byte

// encode to utf16 (surrogate pair dance)

// avoid extra slice()

// Decode in chunks to avoid "call stack size exceeded".

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// the lowest limit is Chrome, with 0x10000 args.

// We go 1 magnitude less, for safety

// eslint-disable-line eqeqeq

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

// typed array instances can be augmented

// chrome 9-10 lack `subarray`

// ie10 has broken `subarray`

/*
 * Export kMaxLength after typed array support is determined.
 */

// not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// Buffer instances.

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// property of a typed array.

// This behaves neither like String nor Uint8Array in that we set start/end

// to their upper/lower bounds if the value passed is out of range.

// undefined is handled specially as per ECMA-262 6th Edition,

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// Return early if start > this.length. Done here to prevent potential uint32

// coercion fail below.

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// Buffer#write(string)

// Warning: maxLength not taken into account in base64Write

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// Copy 0 bytes; we're done

// Fatal error conditions

// Are we oob?

// descending copy from end

// ascending copy from start

// Usage:

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

// Handle string cases:

// Invalid ranges are not set to a default, so can range check early.

// HELPER FUNCTIONS

// ================

// is surrogate component

// last char was a lead

// no lead yet

// unexpected trail

// valid lead

// unpaired lead

// 2 leads in a row

// valid surrogate pair

// encode utf8

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

/* 12 */

// browser shim for xmlhttprequest module

// scheme must be same when usign XDomainRequest

// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

// XMLHttpRequest can be disabled on IE

// Use XDomainRequest for IE8 if enablesXDR is true

// because loading bar keeps flashing when using jsonp-polling

// https://github.com/yujiosaka/socke.io-ie8-loading-example

/* 13 */

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

// SSL options for Node.js client

// results of ReactNative environment detection

// other options for Node.js client

/**
 * Mix in `Emitter`.
 */

/**
 * Module exports.
 */

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

/**
 * Opens the transport.
 *
 * @api public
 */

/**
 * Closes the transport.
 *
 * @api private
 */

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

/**
 * Called upon open
 *
 * @api private
 */

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

/**
 * Called with a decoded packet.
 */

/**
 * Called upon close.
 *
 * @api private
 */

/* 14 */

/* 15 */

/* harmony import */

/* global window */

/* harmony default export */

/* 16 */

/**
 * Managers cache.
 */

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

/* 17 */

// Unique ID creation requires a high quality random # generator.  In the

// browser this is a little complicated due to unknown quality of Math.random()

// and inconsistent support for the `crypto` API.  We do the best we can via

// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto

// implementation. Also, find the complete implementation of crypto on IE11.

// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto

// eslint-disable-line no-undef

// Math.random()-based (RNG)

// If all else fails, use Math.random().  It's fast, but is of unspecified

// quality.

/* 18 */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

/* 19 */

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

/* 20 */

/* 21 */

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

/* 22 */

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

/**
 * Module exports
 */

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

// Only try to reconnect if it's the first time we're connecting

// keeps reconnection from firing twice for the same reconnection loop

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

// emit `open`

// Only do this if there is no fn to handle the error

// emit `connect_error`

// emit `connect_timeout`

// set timer

/**
 * Called upon transport open.
 *
 * @api private
 */

// clear old subs

// mark as open

// add new subs

/**
 * Called upon a ping.
 *
 * @api private
 */

/**
 * Called upon a packet.
 *
 * @api private
 */

/**
 * Called with data.
 *
 * @api private
 */

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

/**
 * Called upon socket error.
 *
 * @api private
 */

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

// manually call here since connecting event is fired before listening

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

// add packet to the queue

// encode, then write to engine with result

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

/**
 * Close the current socket.
 *
 * @api private
 */

// `onclose` will not fire because

// an open event never happened

/**
 * Called upon engine close.
 *
 * @api private
 */

/**
 * Attempt a reconnection.
 *
 * @api private
 */

// check again for the case socket closed in above events

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

/* 23 */

/**
 * Module dependencies
 */

/**
 * Export transports.
 */

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

// some user agents have empty `location.port`

/* 24 */

/**
 * Is XHR2 supported?
 */

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

/**
 * Inherits from Transport.
 */

/**
 * Transport name.
 */

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

/**
 * Starts polling cycle.
 *
 * @api public
 */

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

// decode payload

// if its a close packet, we close the ongoing requests

// if its the first message we consider the transport open

// otherwise bypass onData and handle the message

// if an event did not trigger closing

// if we got data we're not polling

/**
 * For polling, send a close packet.
 *
 * @api private
 */

// in case we're trying to close while

// handshaking is in progress (GH-164)

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

/**
 * Generates uri for connection.
 *
 * @api private
 */

// cache busting is forced

// avoid port if default for schema

// prepend ? to query

/* 25 */

/* global Blob File */

/*
 * Module requirements.
 */

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

// see: https://github.com/Automattic/has-binary/pull/4

/* 26 */

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */

// Map each character to its index.

// Expose the `yeast`, `encode` and `decode` functions.

/* 27 */

/* 28 */

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

/**
 * Shortcut to `Emitter#emit`.
 */

/**
 * `Socket` constructor.
 *
 * @api public
 */

// compat

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

/**
 * "Opens" the socket.
 *
 * @api public
 */

// ensure open

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

// event ack callback

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon engine `open`.
 *
 * @api private
 */

// write connect packet if necessary

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

// prevent double callbacks

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon server connect.
 *
 * @api private
 */

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

/**
 * Called upon server disconnect.
 *
 * @api private
 */

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

// clean subscriptions to avoid reconnections

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

// remove socket from pool

// fire events

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

/* 29 */

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

/* 30 */

/**
 * Slice reference.
 */

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

/* 31 */

/* 32 */

/* harmony export (binding) */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

// extracted by mini-css-extract-plugin

/* 39 */

/* 40 */

/**
 * The code was extracted from:
 * https://github.com/davidchambers/Base64.js
 */

// initialize result and counters

// get next character

// character found in table? initialize bit storage and add its ascii value;

// and if not first of each 4 characters,

// convert the first 8 bits to one ascii character

// try to find character in table (0-63, not found => -1)

/* 41 */

// See https://github.com/broofa/node-uuid for API details

// node and clockseq need to be initialized to random values if they're not

// specified.  We do this lazily to minimize issues related to insufficient

// system entropy.  See #189

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

// Per 4.2.2, randomize (14 bit) clockseq

// UUID timestamps are 100 nano-second units since the Gregorian epoch,

// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so

// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'

// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

// Per 4.2.1.2, use count of uuid's generated during the current clock

// cycle to simulate higher resolution clock

// Per 4.2.1.2 Throw error if too many uuids are requested

// Per 4.2.1.2, Bump clockseq on clock regression

// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new

// time interval

// `time_low`

// Per 4.1.4 - Convert from unix epoch to Gregorian epoch

// `time_mid`

// `time_high_and_version`

// include version

// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

// `clock_seq_low`

// `node`

/* 42 */

// module.parent = undefined by default

/* 43 */

/* 44 */

// Module

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

// default to window.location

// relative path support

// parse

// make sure we treat `localhost:80` and `localhost` equally

// define unique id

// define href

/* 94 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/

/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/

// Disabled?

// Set `diff` timestamp

// Anything else let's inspect with %O

// Apply any `formatters` transformations

// If we encounter an escaped % then don't increase the array index

// Now we need to remove `args[index]` since it's inlined in the `format`

// Apply env-specific formatting (colors, etc.)

// Debug.formatArgs = formatArgs;

// debug.rawLog = rawLog;

// env-specific initialization logic for debug instances

/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/

/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/

/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/

/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/

/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/

/**
	* Active `debug` instances.
	*/

/**
	* The currently active debug mode names, and names to skip.
	*/

/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/

/* 95 */

/**
 * Helpers.
 */

/**
 * Pluralization helper.
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/* 96 */

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

// this hackery is required for IE8/9, where

// the final "%c" is somewhat tricky, because there could be other

// we only are interested in the *last* %c

// is webkit? http://stackoverflow.com/a/16459606/376773

// is firebug? http://stackoverflow.com/a/398120/376773

// is firefox >= v31?

// double check webkit in userAgent just in case we are in a worker

/* 97 */

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

// disabled?

// set `diff` timestamp

// turn the `arguments` into a proper Array

// anything else let's inspect with %O

// apply any `formatters` transformations

// if we encounter an escaped % then don't increase the array index

// now we need to remove `args[index]` since it's inlined in the `format`

// apply env-specific formatting (colors, etc.)

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

/**
 * Disable debug output.
 *
 * @api public
 */

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

// ignore empty strings

/**
 * Active `debug` instances.
 */

/**
 * The currently active debug mode names, and names to skip.
 */

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

/* 98 */

/* 99 */

/*global Blob,File*/

/**
 * Module requirements
 */

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

// number of binary 'attachments'

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

// no longer useful

// appropriate buffer (should be natural order anyway)

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

// convert any blob

// async filereader

// this.result == arraybuffer

// if nothing pending its callback time

// handle array

// and object

/* 100 */

// base64 is 4/3 + up to two characters of the original data

// must be multiple of 3

// go through the array every three bytes, we'll deal with trailing stuff later

// pad the end with zeros, but make sure to not forget the extra bytes

// Support decoding URL-safe base64 strings, as Node.js does.

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// Trim off extra bytes after placeholder bytes are found

// See: https://github.com/beatgammit/base64-js/issues/42

/* 101 */

/* 102 */

/* 103 */

/**
 * Exports parser
 *
 * @api public
 *
 */

/* 104 */

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

// if no port is specified manually, use the protocol default

// detect ReactNative environment

// other options for Node.js or ReactNative client

// set on handshake

// set on heartbeat

// this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */

// append engine.io protocol identifier

// transport name

// per-transport options

// session id if we already have one

// Emit error on next tick so it can be listened to

// Retry with the next transport if the transport is disabled (jsonp: false)

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

// set up transport

// set up transport listeners

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

// Any callback called by transport should be ignored since now

// Handle any error that happens while probing

// When the socket is closed while we're probing

// When the socket is upgraded while we're probing

// Remove all listeners on the transport and on self

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

// we check for `readyState` in case an `open`

// listener already closed the socket

/**
 * Handles a packet.
 *
 * @api private
 */

// Socket is live - any packet counts

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

// In case open handler closes socket

// Prolong liveness of socket on heartbeat

/**
 * Resets ping timeout.
 *
 * @api private
 */

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

/**
* Sends a ping packet.
*
* @api private
*/

/**
 * Called on `drain` event
 *
 * @api private
 */

// setting prevBufferLen = 0 is very important

// for example, when upgrading, upgrade packet is sent over,

// and a nonzero prevBufferLen could cause problems on `drain`

/**
 * Flush write buffers.
 *
 * @api private
 */

// keep track of current length of writeBuffer

// splice writeBuffer and callbackBuffer on `drain`

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

/**
 * Closes the connection.
 *
 * @api private
 */

// wait for upgrade to finish since we can't send packets while pausing a transport

/**
 * Called upon transport error
 *
 * @api private
 */

/**
 * Called upon transport close.
 *
 * @api private
 */

// clear timers

// stop event from firing again for transport

// ensure transport won't stay open

// ignore further transport communication

// set ready state

// clear session id

// emit close event

// clean buffers after, so users can still

// grab the buffers on `close` event

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

/* 105 */

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

// if XMLHttp support is disabled in IE then it will throw

// when trying to create

/* 106 */

/* global attachEvent */

/**
 * Module requirements.
 */

/**
 * Empty function
 */

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

/**
 * Inherits from Polling.
 */

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

/**
 * XHR supports binary
 */

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

/**
 * Starts a poll cycle.
 *
 * @api private
 */

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

// ie6 check

// make sure the `error` event handler that's user-set

// does not throw in the same tick and gets caught here

// Need to defer since .create() is called directly fhrom the constructor

// and thus the 'error' event can only be only bound *after* this exception

// occurs.  Therefore, also, we cannot throw here at all.

/**
 * Called upon successful response.
 *
 * @api private
 */

/**
 * Called if we have data.
 *
 * @api private
 */

/**
 * Called upon error.
 *
 * @api private
 */

/**
 * Cleans up house.
 *
 * @api private
 */

// xmlhttprequest

/**
 * Called upon load.
 *
 * @api private
 */

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

/**
 * Aborts the request.
 *
 * @api public
 */

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

/* 107 */

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

/* 108 */

/* 109 */

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

/* 110 */

// after first error, rest are passed to err_cb

// future error callbacks will go to error handler

/* 111 */

/*! https://mths.be/utf8js v2.1.2 by @mathias */

// Taken from https://mths.be/punycode

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

/*--------------------------------------------------------------------------*/

// 1-byte sequence

// 2-byte sequence

// 3-byte sequence

// 4-byte sequence

// If we end up here, it’s not a continuation byte

// Read first byte

// 1-byte sequence (no continuation bytes)

// 3-byte sequence (may include unpaired surrogates)

/* 112 */

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

// Use a lookup table to find the index.

/* 113 */

/**
 * Create a blob builder even when vendor prefixes exist
 */

/**
 * Check if Blob constructor is supported
 */

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

// if this is a subarray, make a copy so we only

// include the subarray region from the underlying buffer

/* 114 */

/* 115 */

/* 116 */

/**
 * Cached regular expressions.
 */

/**
 * Noop.
 */

/**
 * Until https://github.com/tc39/proposal-global is shipped.
 */

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

// define global callbacks array if not present

// we do this here (lazily) to avoid unneeded global pollution

// we need to consider multiple engines in the same page

// callback identifier

// add callback to jsonp global

// append to query string

// prevent spurious errors from being emitted when the window is unloaded

/*
 * JSONP only supports binary as base64 encoded strings
 */

/**
 * Closes the socket.
 *
 * @api private
 */

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

// ie6 dynamic iframes with target="" support (thanks Chris Lambacher)

// escape \n to prevent it from being converted into \r\n by some UAs

// double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

/* 117 */

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

/**
 * Transport name.
 *
 * @api public
 */

/*
 * WebSockets support binary
 */

/**
 * Opens socket.
 *
 * @api private
 */

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

// encodePacket efficient as it uses WS framing

// no need for encodePayload

// always create a new object (GH-437)

// Sometimes the websocket has already been closed but the browser didn't

// have a chance of informing us about it yet, in that case send will

// throw an error

// TypeError is thrown when passing the second argument on Safari

// fake drain

// defer to next tick to allow Socket to clear writeBuffer

/**
 * Called upon close
 *
 * @api private
 */

/**
 * Closes socket.
 *
 * @api private
 */

// append timestamp to URI

// communicate binary support capabilities

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

/* 118 */

/* (ignored) */

/* 119 */

/* 120 */

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

/**
 * Expose `Backoff`.
 */

/**
 * Reset the number of attempts.
 *
 * @api public
 */

/**
 * Set the minimum duration
 *
 * @api public
 */

/**
 * Set the maximum duration
 *
 * @api public
 */

/**
 * Set the jitter
 *
 * @api public
 */

/* 121 */

/* 122 */

/* 123 */

// EXTERNAL MODULE: ./src/index.scss

// EXTERNAL MODULE: ./node_modules/uuid/v4.js

/*#__PURE__*/

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/connect-mixin.js

/**
@license
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/

/**
  This is a JavaScript mixin that you can use to connect a Custom Element base
  class to a Redux store. The `stateChanged(state)` method will be called when
  the state is updated.

  Example:

      import { connect } from 'pwa-helpers/connect-mixin.js';

      class MyElement extends connect(store)(HTMLElement) {
        stateChanged(state) {
          this.textContent = state.data.count.toString();
        }
      }
*/

/**
     * The `stateChanged(state)` method will be called when the state is updated.
     */

//# sourceMappingURL=connect-mixin.js.map

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/lazy-reducer-enhancer.js

/**
  A Redux store enhancer that lets you lazy-install reducers after the store
  has booted up. Use this if your application lazy-loads routes that are connected
  to a Redux store.

  Example:

      import { combineReducers } from 'redux';
      import { lazyReducerEnhancer } from 'pwa-helpers/lazy-reducer-enhancer.js';
      import someReducer from './reducers/someReducer.js';

      export const store = createStore(
        (state, action) => state,
        compose(lazyReducerEnhancer(combineReducers))
      );

  Then, in your page/element, you can lazy load a specific reducer with:

      store.addReducers({
        someReducer
      });
*/

//# sourceMappingURL=router.js.map

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/pwa-helpers/pwa-helpers.js

//# sourceMappingURL=pwa-helpers.js.map

// EXTERNAL MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: C:/Users/mariu/Projekte/chromeExtensions/web-marker/extension/node_modules/redux/es/redux.js

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

// EXTERNAL MODULE: ./node_modules/jwt-decode/lib/index.js

// tslint:disable-next-line: no-empty

// CONCATENATED MODULE: ./src/environments/environment.dev.ts

// EXTERNAL MODULE: ./node_modules/uuid/index.js

// CONCATENATED MODULE: ./src/services/marker.service.ts

//await this.emitSocket('createMark', mark);

/**
     * Adds the tags of the current bookmark to the created mark
     *
     * @param {Mark} mark
     * @memberof MarkerService
     */

// CONCATENATED MODULE: ./src/services/bookmark.service.ts

// Update redux

/**
     * When the tags of a bookmarks change. The tags are also being added to the related marks.
     *
     * @memberof BookmarkService
     */

// CONCATENATED MODULE: ./src/store/actions.ts

// CONCATENATED MODULE: ./src/services/jwt.service.ts

/**
     * Tries to get the jwt-token either from the chrome storage or localstorage
     *
     * @returns {Promise<JwtPayload>}
     * @memberof JwtService
     */

// CONCATENATED MODULE: ./src/store/reducer.ts

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

// @ts-ignore

/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */

/**
 * An updateable Template that tracks the location of dynamic parts.
 */

/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */

// Edge needs all 4 parameters present; IE11 needs 3rd parameter to be

// null

// Keeps track of the last index associated with a part. We try to delete

// unnecessary nodes, but we never want to associate two different parts

// to the same index. They must have a constant node between.

/* Node.ELEMENT_NODE */

// Per

// https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,

// attributes are not guaranteed to be returned in document order.

// In particular, Edge/IE can return them out of order, so we cannot

// assume a correspondance between part index and attribute index.

// Get the template literal section leading up to the first

// expression in this attribute

// Find the attribute name

/* Node.TEXT_NODE */

// Generate a new text node for each literal section

// These nodes are also used as the markers for node parts

// If there's no text, we must insert a comment to mark our place.

// Else, we can trust it will stick around after cloning.

// We have a part for each match found

/* Node.COMMENT_NODE */

// Add a new marker node to be the startNode of the Part if any of

// the following are true:

//  * We don't have a previousSibling

//  * The previousSibling is already the start of a previous part

// If we don't have a nextSibling, keep this node so we have an end.

// Else, we can remove it to save future costs.

// Comment node has a binding marker inside, make an inactive part

// The binding won't work, but subsequent bindings will

// TODO (justinfagnani): consider whether it's even worth it to

// make bindings in comments work

// Remove text binding nodes after the walk to not disturb the TreeWalker

// Allows `document.createComment('')` to be renamed for a

// small manual size-savings.

//# sourceMappingURL=template.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-instance.js

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */

/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */

// When using the Custom Elements polyfill, clone the node, rather than

// importing it, to keep the fragment in the template's document. This

// leaves the fragment inert so custom elements won't upgrade and

// potentially modify their contents by creating a polyfilled ShadowRoot

// while we traverse the tree.

// Loop through all the nodes and parts of a template

// Consecutive Parts may have the same node index, in the case of

// multiple bound attributes on an element. So each iteration we either

// increment the nodeIndex, if we aren't on a node with a part, or the

// partIndex if we are. By not incrementing the nodeIndex when we find a

// part, we allow for the next part to be associated with the current

// node if neccessasry.

//# sourceMappingURL=template-instance.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-result.js

/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */

/**
     * Returns a string of HTML used to create a `<template>` element.
     */

// This exec() call does two things:

// 1) Appends a suffix to the bound attribute name to opt out of special

// attribute value parsing that IE11 and Edge do, like for style and

// many SVG attributes. The Template class also appends the same suffix

// when looking up attributes to create Parts.

// 2) Adds an unquoted-attribute-safe marker for the first expression in

// an attribute. Subsequent attribute expressions will use node markers,

// and this is safe since attributes with multiple expressions are

// guaranteed to be quoted.

// We're starting a new bound attribute.

// Add the safe attribute suffix, and use unquoted-attribute-safe

// marker.

/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */

//# sourceMappingURL=template-result.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/parts.js

/**
 * Sets attribute values for AttributeParts, so that the value is only set once
 * even if there are multiple parts for an attribute.
 */

/**
     * Creates a single part. Override this to create a differnt type of part.
     */

// tslint:disable-next-line:no-any

// If the value is a not a directive, dirty the committer so that it'll

// call setAttribute. If the value is a directive, it'll dirty the

// committer if it calls setValue().

/**
     * Inserts this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and
     * its next sibling must be static, unchanging nodes such as those that appear
     * in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */

/**
     * Appends this part after `ref`
     *
     * This part must be empty, as its contents are not automatically moved.
     */

// Fallback, will render the string representation

// If we only have a single text node between the markers, we can just

// set its value, rather than replacing it.

// TODO(justinfagnani): Can we just check if this.value is primitive?

// Make sure we propagate the template processor from the TemplateResult

// so that we use its syntax extension, etc. The template factory comes

// from the render function options so that it can control template

// caching and preprocessing.

// For an Iterable, we create a new InstancePart per item, then set its

// value to the item. This is a little bit of overhead for every item in

// an Iterable, but it lets us recurse easily and efficiently update Arrays

// of TemplateResults that will be commonly returned from expressions like:

// array.map((i) => html`${i}`), by reusing existing TemplateInstances.

// If _value is an array, then the previous render was of an

// iterable and _value will contain the NodeParts from the previous

// render. If _value is not an array, clear this part and make a new

// array for NodeParts.

// Lets us keep track of how many items we stamped so we can clear leftover

// items from a previous render

// Try to reuse an existing part

// If no existing part, create a new one

// Truncate the parts array so _value reflects the current state

/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */

/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */

// Detect event listener options support. If the `capture` property is read

// from the options object, then options are supported. If not, then the thrid

// argument to add/removeEventListener is interpreted as the boolean capture

// value so we should only pass the `capture` property.

// We copy options because of the inconsistent behavior of browsers when reading

// the third argument of add/removeEventListener. IE11 doesn't support options

// at all. Chrome 41 only reads `capture` if the argument is an object.

//# sourceMappingURL=parts.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/default-template-processor.js

/**
 * Creates Parts when a template is instantiated.
 */

/**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */

/**
     * Create parts for a text-position binding.
     * @param templateFactory
     */

//# sourceMappingURL=default-template-processor.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-factory.js

/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */

// If the TemplateStringsArray is new, generate a key from the strings

// This key is shared between all templates with identical content

// Check if we already have a Template for this key

// If we have not seen this key before, create a new Template

// Cache the Template for this key

// Cache all future queries for this TemplateStringsArray

//# sourceMappingURL=template-factory.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/render.js

//# sourceMappingURL=render.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js

/**
 *
 * Main lit-html module.
 *
 * Main exports:
 *
 * -  [[html]]
 * -  [[svg]]
 * -  [[render]]
 *
 * @module lit-html
 * @preferred
 */

/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */

// TODO(justinfagnani): remove line when we get NodePart moving methods

// IMPORTANT: do not change the property name or the assignment expression.

// This line will be used in regexes to search for lit-html usage.

// TODO(justinfagnani): inject version number at build time

/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */

/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */

/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */

// End removal if stepped past the removing node

// A node to remove was found in the template

// Track node we're removing

// When removing, increment count by which to adjust subsequent part indices

// If part is in a removed node deactivate it by setting index to -1 or

// adjust the index as needed.

// go to the next active part.

/* Node.DOCUMENT_FRAGMENT_NODE */

//# sourceMappingURL=modify-template.js.map

// CONCATENATED MODULE: ./node_modules/lit-html/lib/shady-render.js

/**
 * Module to add shady DOM/shady CSS polyfill support to lit-html template
 * rendering. See the [[render]] method for details.
 *
 * @module shady-render
 * @preferred
 */

// Get a key to lookup in `templateCaches`.

/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */

// Move styles out of rendered DOM and store.

// If there are no styles, skip unnecessary work

// Ensure prepareTemplateStyles is called to support adding

// styles via `prepareAdoptedCssText` since that requires that

// `prepareTemplateStyles` is called.

// Collect styles into a single style. This helps us make sure ShadyCSS

// manipulations will not prevent us from being able to fix up template

// part indices.

// NOTE: collecting styles is inefficient for browsers but ShadyCSS

// currently does this anyway. When it does not, this should be changed.

// Remove styles from nested templates in this scope.

// IE 11 doesn't support the iterable param Set constructor

// And then put the condensed style into the "root" template passed in as

// `template`.

/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */

// If there's no refNode, then put node at end of template.

// No part indices need to be shifted in this case.

// If we've inserted the node, simply adjust all subsequent parts

// Note, it's important that ShadyCSS gets the template that `lit-html`

// will actually render so that it can update the style inside when

// needed (e.g. @apply native Shadow DOM case).

// When in native Shadow DOM, re-add styling to rendered content using

// the style ShadyCSS produced.

// When not in native Shadow DOM, at this point ShadyCSS will have

// removed the style from the lit template and parts will be broken as a

// result. To fix this, we put back the style node ShadyCSS removed

// and then tell lit to remove that node from the template.

// NOTE, ShadyCSS creates its own style so we can safely add/remove

// `condensedStyle` here.

//# sourceMappingURL=shady-render.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lib/updating-element.js

/**
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */

// if the value is `null` or `undefined` pass this through

// to allow removing/no change behavior.

/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */

/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 */

/**
         * Map with keys for any properties that have changed since the last
         * update cycle with previous values.
         */

/**
         * Map with keys of properties that should be reflected when updated.
         */

/**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     */

// note: piggy backing on this to ensure we're finalized.

// Use forEach so this works even if for/of loops are compiled to for loops

// expecting arrays

/**
     * Ensures the private `_classProperties` property metadata is created.
     * In addition to `finalize` this is also called in `createProperty` to
     * ensure the `@property` decorator can add property metadata.
     */

/** @nocollapse */

// ensure private storage for property declarations.

// NOTE: Workaround IE11 not supporting Map constructor argument.

/**
     * Creates a property accessor on the element prototype if one does not exist.
     * The property setter calls the property's `hasChanged` property option
     * or uses a strict identity check to determine whether or not to request
     * an update.
     * @nocollapse
     */

// Do not generate an accessor if the prototype already has one, since

// it would be lost otherwise and that would never be the user's intention;

// Instead, we expect users to call `requestUpdate` themselves from

// user-defined accessors. Note that if the super has an accessor we will

// still overwrite it

// Note, since this can be called by the `@property` decorator which

// is called before `finalize`, we ensure storage exists for property

// metadata.

// tslint:disable-next-line:no-any no symbol in index

/**
     * Creates property accessors for registered properties and ensures
     * any superclasses are also finalized.
     * @nocollapse
     */

// finalize any superclasses

// make any properties

// Note, only process "own" properties since this element will inherit

// any properties defined on the superClass, and finalization ensures

// the entire prototype chain is finalized.

// initialize Map populated in observedAttributes

// support symbols in properties (IE11 does not support this)

// This for/of is ok because propKeys is an array

// note, use of `any` is due to TypeSript lack of support for symbol in

// index types

/**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */

/**
     * Returns true if a property should request an update.
     * Called when a property value is set and uses the `hasChanged`
     * option for the property if present or a strict identity check.
     * @nocollapse
     */

/**
     * Returns the property value for the given attribute value.
     * Called via the `attributeChangedCallback` and uses the property's
     * `converter` or `converter.fromAttribute` property option.
     * @nocollapse
     */

/**
     * Returns the attribute value for the given property value. If this
     * returns undefined, the property will *not* be reflected to an attribute.
     * If this returns null, the attribute will be removed, otherwise the
     * attribute will be set to the value.
     * This uses the property's `reflect` and `type.toAttribute` property options.
     * @nocollapse
     */

/**
     * Performs element initialization. By default captures any pre-set values for
     * registered properties.
     */

// ensures first update will be caught by an early access of `updateComplete`

/**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */

/**
     * Applies previously saved instance properties.
     */

// Ensure first connection completes an update. Updates cannot complete before

// connection and if one is pending connection the `_hasConnectionResolver`

// will exist. If so, resolve it to complete the update, otherwise

// requestUpdate.

/**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     */

/**
     * Synchronizes property values when attributes change.
     */

// an undefined value does not change the attribute.

// Track if the property is being reflected to avoid

// setting the property again via `attributeChangedCallback`. Note:

// 1. this takes advantage of the fact that the callback is synchronous.

// 2. will behave incorrectly if multiple attributes are in the reaction

// stack at time of calling. However, since we process attributes

// in `update` this should not be possible (or an extreme corner case

// that we'd like to discover).

// mark state reflecting

// mark state not reflecting

// Use tracking info to avoid deserializing attribute value if it was

// just set from a property setter.

/**
     * This private version of `requestUpdate` does not access or return the
     * `updateComplete` promise. This promise can be overridden and is therefore
     * not free to access.
     */

// If we have a property key, perform property update steps.

// Add to reflecting properties set.

// Note, it's important that every change has a chance to add the

// property to `_reflectingProperties`. This ensures setting

// attribute + property reflects correctly.

// Abort the request if the property should not be considered changed.

/**
     * Requests an update which is processed asynchronously. This should
     * be called when an element should update based on some state not triggered
     * by setting a property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored. Returns the `updateComplete` Promise which is resolved
     * when the update completes.
     *
     * @param name {PropertyKey} (optional) name of requesting property
     * @param oldValue {any} (optional) old value of requesting property
     * @returns {Promise} A Promise that is resolved when the update completes.
     */

/**
     * Sets up the element to asynchronously update.
     */

// Mark state updating...

// Ensure any previous update has resolved before updating.

// This `await` also ensures that property changes are batched.

// Ignore any previous errors. We only care that the previous cycle is

// done. Any error should have been handled in the previous update.

// Make sure the element has connected before updating.

// If `performUpdate` returns a Promise, we await it. This is done to

// enable coordinating updates with a scheduler. Note, the result is

// checked to avoid delaying an additional microtask unless we need to.

/**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * You can override this method to change the timing of updates. If this
     * method is overridden, `super.performUpdate()` must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```
     * protected async performUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.performUpdate();
     * }
     * ```
     */

// Mixin instance properties once, if they exist.

// Prevent `firstUpdated` and `updated` from running when there's an

// update exception.

// Ensure element can accept additional updates after an exception.

/**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update. This getter can be implemented to
     * await additional state. For example, it is sometimes useful to await a
     * rendered element before fulfilling this Promise. To do this, first await
     * `super.updateComplete` then any subsequent state.
     *
     * @returns {Promise} The Promise returns a boolean that indicates if the
     * update resolved without triggering another update.
     */

/**
     * Controls whether or not `update` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

// Use forEach so this works even if for/of loops are compiled to for

// loops expecting arrays

/**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * * @param _changedProperties Map of changed properties with old values
     */

/**
 * Marks class as having finished creating properties.
 */

//# sourceMappingURL=updating-element.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lib/decorators.js

// This callback is called once the class is otherwise fully defined

// When decorating an accessor, pass it through and add property metadata.

// Note, the `hasOwnProperty` check in `createProperty` ensures we don't

// stomp over the user's accessor.

// When @babel/plugin-proposal-decorators implements initializers,

// do this instead of the initializer below. See:

// https://github.com/babel/babel/issues/9260 extras: [

//   {

//     kind: 'initializer',

//     placement: 'own',

//     initializer: descriptor.initializer,

//   }

// ],

// tslint:disable-next-line:no-any decorator

/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A `PropertyDeclaration` may optionally be
 * supplied to configure property features.
 *
 * @ExportDecoratedItems
 */

/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

// Note, this is a getter so that it's lazy. In practice, this means

// stylesheets are not created until the first element instance is made.

// Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet

// is constructable.

/**
 * Wrap a value for interpolation in a css tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */

//# sourceMappingURL=css-tag.js.map

// CONCATENATED MODULE: ./node_modules/lit-element/lit-element.js

// This line will be used in regexes to search for LitElement usage.

/** Deeply flattens styles array. Uses native flat if available. */

/**
 * Minimal implementation of Array.prototype.flat
 * @param arr the array to flatten
 * @param result the accumlated result
 */

// Prepare styling that is stamped at first render time. Styling

// is built from user provided `styles` or is inherited from the superclass.

// Take care not to call `this.styles` multiple times since this generates

// new CSSResults each time.

// TODO(sorvell): Since we do not cache CSSResults by input, any

// shared styles will generate new stylesheet objects, which is wasteful.

// This should be addressed when a browser ships constructable

// stylesheets.

// Array.from does not work on Set in IE

/**
     * Performs element initialization. By default this calls `createRenderRoot`
     * to create the element `renderRoot` node and captures any pre-set values for
     * registered properties.
     */

// Note, if renderRoot is not a shadowRoot, styles would/could apply to the

// element's getRootNode(). While this could be done, we're choosing not to

// support this now since it would require different logic around de-duping.

/**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     * @returns {Element|DocumentFragment} Returns a node into which to render.
     */

/**
     * Applies styling to the element shadowRoot using the `static get styles`
     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
     * available and will fallback otherwise. When Shadow DOM is polyfilled,
     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
     * is available but `adoptedStyleSheets` is not, styles are appended to the
     * end of the `shadowRoot` to [mimic spec
     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
     */

// There are three separate cases here based on Shadow DOM support.

// (1) shadowRoot polyfilled: use ShadyCSS

// (2) shadowRoot.adoptedStyleSheets available: use it.

// (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after

// rendering

// This must be done after rendering so the actual style insertion is done

// in `update`.

// Note, first update/render handles styleElement so we only call this if

// connected after first update.

/**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * * @param _changedProperties Map of changed properties with old values
     */

// When native Shadow DOM is used but adoptedStyles are not supported,

// insert styling after rendering to ensure adoptedStyles have highest

// priority.

/**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */

/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 */

//# sourceMappingURL=lit-element.js.map

// CONCATENATED MODULE: ./src/helper/markerHelper.ts

/**
 * Creates the mark element to highlight text
 *
 * @param {Range} [range]
 * @param {Mark} [mark]
 * @returns
 */

/**
 * Returns the StartContainer or EndContainer to recreate the range of the given mark
 *
 * @export
 * @param {HTMLElement} container
 * @param {Mark} mark
 * @param {boolean} start true = searchs for StartContainer; false = searchs for EndContainer
 * @returns {HTMLElement}
 */

/**
 * Creates the mark in the DOM. Afterwards it listenes for a deletion event to remove it.
 *
 * @param {HTMLElement} markElement
 * @param {Mark} mark
 */

/**
 * Adds the style for the mark element.
 *
 */

// CONCATENATED MODULE: ./src/components/app.component.ts

// Unwraps the mark element

// move all children out of the element

// remove the empty element

/**
 * Returns all text nodes under an element
 *
 * @export
 * @param {Node} node
 * @returns {Node[]}
 */

// tslint:disable-next-line: prefer-for-of

/**
 * Render method used to render the lit-html TemplateResult to the element's
 * DOM.
 * @param {TemplateResult} Template to render.
 * @param {Element|DocumentFragment} Node into which to render.
 * @param {String} Element name.
 * @nocollapse
 */

// When performing first scope render,

// (1) We've rendered into a fragment so that there's a chance to

// `prepareTemplateStyles` before sub-elements hit the DOM

// (which might cause them to render based on a common pattern of

// rendering in a custom element's `connectedCallback`);

// (2) Scope the template with ShadyCSS one time only for this scope.

// (3) Render the fragment into the container and make sure the

// container knows its `part` is the one we just rendered. This ensures

// DOM will be re-used on subsequent renders.

// After elements have hit the DOM, update styling if this is the

// initial render to this container.

// This is needed whenever dynamic changes are made so it would be

// safest to do every render; however, this would regress performance

// so we leave it up to the user to call `ShadyCSSS.styleElement`

// for dynamic changes.

/**
         * Set width of menu in px to calculate center.
         * Only for making new marks.
         *
         * @memberof WebMarker
         */

/**
     * Listens for click and selection events to show or hide the marker
     *
     * @memberof WebMarker
     */

/**
     *  Sets the position of the marker for a click event.
     *  Gets the center from the bounds of the createdRange
     *
     * @param {MouseEvent} e
     * @memberof WebMarker
     */

/**
     *  This method loads all marks for current url from server
     *
     * @todo Load only marks with current url from server
     *
     * @memberof WebMarker
     */

/**
     *  Scroll to mark if there is a scrollY param in query url.
     *  SetTimeout to put at the end of event Loop
     * @memberof WebMarker
     */

// CONCATENATED MODULE: ./src/components/my-marker/my-marker.component.ts

/**
         *  Necessary to abort hide animation when user enters mark again
         *
         * @memberof MyMarkerElement
         */

//await this.initSocket();

//this.handleSockets();

// async initSocket() {

//   const jwt = await this.jwtService.getJwt();

//   const jwtPayload = await this.jwtService.getJwtPayload();

//   if (environment.production) {

//     this.socket = openSocket(environment.SOCKET_URL, { query: { jwt: jwt } });

//   } else {

//     this.socket = openSocket(environment.SOCKET_URL, { query: { jwt: jwt }, transports: ['websocket', 'xhr-polling'] });

//   this.socket.emit('join', { id: jwtPayload._id, email: jwtPayload.email });

// }

// handleSockets() {

//   this.socket.on('deleteMark', (deletedMarkId: string) => {

//     if (this.mark.id === deletedMarkId) {

//       deleteMarkFromDom(this.parentElement);

//       this.remove();

//     }

//   });

//   this.socket.on('updateMark', (updatedMark: Mark) => {

//     if (this.mark.id === updatedMark.id) {

//       this.mark = updatedMark;

//   // this.socket.on('connect', (data: string) => {

//   //   console.log('yeah');

//   // });

/**
     *  Sets position of this component so that it is centralized above mark-element
     *
     * @memberof MyMarkerElement
     */

// this.style.left = rectLines.length === 1 ? this.parentElement.offsetLeft + 'px' : this.parentElement.parentElement.offsetLeft + 'px';

/**
     * Iterates over all rectlines and returns the maximum width of line
     *
     * @param {DOMRectList} rectLines
     * @returns
     * @memberof MyMarkerElement
     */

/**
     * Iterates over all clientRect rows and sums up all heights
     *
     * @returns
     * @memberof MyMarkerElement
     */

/**
     *  Register Listener to show and hide hovering menu.
     *  Abortes hiding when user enters element again after 300ms
     *
     * @memberof MyMarkerElement
     */

/**
     *  Cascading event to trigger delete in root component
     *
     * @memberof MyMarkerElement
     */

// CONCATENATED MODULE: ./src/helper/router.ts

// CONCATENATED MODULE: ./src/components/my-menu/my-menu.component.ts

/**
     *  Width is set dynamically because it it necessary to calculcate center in parent element
     *
     * @memberof MyMarkElement
     */

/**
     * This method creates the mark in the browser. The id will be given to element after server created element.
     *
     * @param {MouseEvent}
     * @memberof MyMarkElement
     */

/**
     * Created mark to save it in database.
     * Attributes of the range are saved to recreate it later.
     *
     * @returns {Mark}
     * @memberof MyMarkElement
     */

/**
     *  First dispatches event to delete mark in client,
     *  then deletes it in server.
     *
     * @memberof MyMarkElement
     */

/* tslint:disable: max-line-length */

// CONCATENATED MODULE: ./src/components/bronco-chip/app.component.ts

/**
 * Modern chip
 * @event clicked - Dispatches when chip is clicked.
 * @event removed - Dispatched when removed is clicked.
 * @slot - Default content.
 * @cssprop --primary-color - Background color
 * @cssprop --height - Height of the chip
 *
 */

/**
     * Modern chip
     * @event clicked - Dispatches when chip is clicked.
     * @event removed - Dispatched when removed is clicked.
     * @slot - Default content.
     * @cssprop --primary-color - Background color
     * @cssprop --height - Height of the chip
     *
     */

/**
         *
         * If true, trash icon will be shown with red background
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * If true, trash icon will not be shown
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         *
         * If value, a badge with number can be shown
         * @type {number}
         * @memberof BroncoChip
         */

/**
         *
         * Makes the chip outlined
         * @type {boolean}
         * @memberof BroncoChip
         */

/**
         * Enables the outline effect after clicking
         * @type {boolean}
         * @memberof BroncoChip
         */

// CONCATENATED MODULE: ./src/components/bronco-chip-list/app.component.ts

/**
 * Modern chip
 * @event tagsChanged - Dispatched when tags changed and returns array of tags
 * @event submitTriggered - Submit event when user enters 'ENTER' twise
 * @slot - Default content.
 * @cssprop --bg-color - Background color
 * @cssprop --color - Font color
 * @cssprop --font-size - Font size
 * @cssprop --min-height - Min-height of the chip-list
 * @cssprop --primary-color - Primary color which is set on focus
 *
 */

/**
     * Modern chip
     * @event tagsChanged - Dispatched when tags changed and returns array of tags
     * @event submitTriggered - Submit event when user enters 'ENTER' twise
     * @slot - Default content.
     * @cssprop --bg-color - Background color
     * @cssprop --color - Font color
     * @cssprop --font-size - Font size
     * @cssprop --min-height - Min-height of the chip-list
     * @cssprop --primary-color - Primary color which is set on focus
     *
     */

/**
         * Array of tags as strings
         *
         * @memberof BroncoChipList
         */

/**
         * Property to set focus on input initially
         *
         * @memberof BroncoChipList
         */

/**
         * Property to prevent to fast deleting. So that user has to click backspace twice.
         *
         * @memberof BroncoChipList
         */

/**
         * Property to trigger submit after entering ENTER twice
         *
         * @memberof BroncoChipList
         */

/**
         * Current value for input for auto-complete
         *
         * @memberof BroncoChipList
         */

/**
     * Listen to keyboard event to either add or remove tags
     * Tags are being added when user enters space or enter
     *
     * @param {KeyboardEvent} e
     * @memberof BroncoChipList
     */

/**
     * Adds a tag if current value is not empty.
     * It splits the current value by space
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

/**
     * Deletes a tag if it is already markes as deleted.
     *
     * @param {HTMLInputElement} target
     * @memberof BroncoChipList
     */

/**
     * Event triggered by the custom auto-complete component.
     *
     * If user clicks on autocomplete it has to be manually added. If user presses enter it will be captured by
     * the event listener of the inputElement.
     *
     * @param {CustomEvent} e
     * @param {boolean} [isClick]
     * @memberof BroncoChipList
     */

// CONCATENATED MODULE: ./src/components/bronco-chip-list/auto-complete/auto-complete.component.ts

// Enter

// Key arrow down

// Key arrow up

/**
     * Remove event handler
     *
     * @memberof HeaderToggleComponent
     */

// CONCATENATED MODULE: ./src/services/user.service.ts

/**
     * Signs the user in and saves the jwtToken in the jwtService.
     *
     * @returns {Promise<string>}
     * @memberof UserService
     */

// CONCATENATED MODULE: ./src/components/pop-up/sign-in/sign-in.component.ts

/**
 *
 * This component is the sign-in component.
 *
 * It allows the user to login.
 *
 * @export
 * @class SignInComponent
 * @extends {LitElement}
 */

/**
     *
     * This component is the sign-in component.
     *
     * It allows the user to login.
     *
     * @export
     * @class SignInComponent
     * @extends {LitElement}
     */

// CONCATENATED MODULE: ./src/components/pop-up/app.component.ts

// html`<sign-in @login=${async () => await this.loadUserData()}></sign-in>`}

// CONCATENATED MODULE: ./src/components/pop-up/tab-bar/tab-bar.component.ts

/**
 *
 * This component is a liquid tabbar 'stolen' from https://codepen.io/marius2502/pen/rNBoeBz.
 *
 * It allows the user to login.
 *
 * @export
 * @class SignInComponent
 * @extends {LitElement}
 */

/**
     *
     * This component is a liquid tabbar 'stolen' from https://codepen.io/marius2502/pen/rNBoeBz.
     *
     * It allows the user to login.
     *
     * @export
     * @class SignInComponent
     * @extends {LitElement}
     */

// CONCATENATED MODULE: ./src/components/pop-up/action-toolbar/action-toolbar.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/lobby-container/app.component.ts

/**
 *
 * This component is the sign-in component.
 *
 * It allows the user to login.
 *
 * @export
 * @class LobbyContainer
 * @extends {LitElement}
 */

/**
     *
     * This component is the sign-in component.
     *
     * It allows the user to login.
     *
     * @export
     * @class LobbyContainer
     * @extends {LitElement}
     */

// CONCATENATED MODULE: ./src/components/pop-up/account-overview/account-overview.component.ts

// CONCATENATED MODULE: ./src/components/bubbles-animation/bubbles-animation.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/mark-badge/mark-badge.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/header-toggle/header-toggle.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/tree-view/tree-view.component.ts

// CONCATENATED MODULE: ./src/helper/urlHelper.ts

// CONCATENATED MODULE: ./src/components/pop-up/accordion-view/accordion-view.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/origin-overview/origin-overview.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/origin-element/origin-element.component.ts

/**
     * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be completed.
     *
     * @memberof TreeViewComponent
     */

/**
         * This method toggles the dropdown icon of the element.
         * Fix: If it is the fist item in the list, this is not necessary because it disappears otherwise.
         */

// CONCATENATED MODULE: ./src/components/pop-up/bookmark-overview/bookmark-overview.component.ts

// Filter if search value is given

// Prevents to update too much. Checks if update got interrupted by user input

// CONCATENATED MODULE: ./src/components/pop-up/mark-element/mark-element.component.ts

/**
*
* This component shows one single mark
*
* It allows the user to login.
*
* @export
* @class MarkElementComponent
* @extends {LitElement}
*/

/**
    *
    * This component shows one single mark
    *
    * It allows the user to login.
    *
    * @export
    * @class MarkElementComponent
    * @extends {LitElement}
    */

// CONCATENATED MODULE: ./src/helper/dateHelper.ts

// CONCATENATED MODULE: ./src/components/pop-up/bookmark-element/bookmark-element.component.ts

//this.bookmark ? this.tags = this.bookmark.tags : '';

/**
    * Creates a new bookmark when clicking on bookmark icon
    *
    * @memberof BookmarkElementComponent
    */

// await this.updateBookmark();

/**
    * This method toggles the dropdown icon of the element. The timeout is necessary to wait for the animation to be
    completed.
    *
    * @memberof TreeViewComponent
    */

// CONCATENATED MODULE: ./src/components/pop-up/mark-overview/mark-overview.component.ts

/**
*
* This shows all marks and can be filtered by the filterValue
*
* @export
* @class MarkOverviewComponent
* @extends {LitElement}
*/

/**
    *
    * This shows all marks and can be filtered by the filterValue
    *
    * @export
    * @class MarkOverviewComponent
    * @extends {LitElement}
    */

/**
         * When set to true, only marks for current page are shown
         *
         * @memberof MainComponentComponent
         */

// Filter for current page if mode is set to currentPage

// Filter for current bookmark, if given

// CONCATENATED MODULE: ./src/components/pop-up/tags-view/tags-view.component.ts

// CONCATENATED MODULE: ./src/components/pop-up/search-view/search-view.component.ts

// EXTERNAL MODULE: ./node_modules/socket.io-client/lib/index.js

/**
*
* This component is the sign-in component.
*
* It allows the user to login.
*
* @export
* @class MarkOverviewComponent
* @extends {LitElement}
*/

/**
    *
    * This component is the sign-in component.
    *
    * It allows the user to login.
    *
    * @export
    * @class MarkOverviewComponent
    * @extends {LitElement}
    */

/**
        * 1 = Only marks for current page
        * 2 = Accordion view of marks for all pages
        *
        * @memberof MarkOverviewComponent
        */

/**
    * Function called by extended connect method from pwa-helper, when state changed
    *
    * @memberof MarkOverviewComponent
    */

// this.socket.on('createMark', (createdMark: Mark) => {

// this.allMarks = [...this.allMarks, createdMark];

// if (location.href === createdMark.url) {

// this.marks = [...this.marks, createdMark];

// } else {

// // TODO: Maybe a popup to show that on different page has been added a mark?

// });

// this.socket.on('deleteMark', (deletedMarkId: string) => {

// this.marks = this.marks.filter(mark => mark.id !== deletedMarkId);

// this.allMarks = this.allMarks.filter(mark => mark.id !== deletedMarkId);

// this.socket.on('updateMark', (updatedMark: Mark) => {

// this.marks = this.marks.map(mark => mark.id === updatedMark.id ? updatedMark : mark);

// this.allMarks = this.allMarks.map(mark => mark.id === updatedMark.id ? updatedMark : mark);

// this.socket.on('connect', (data: string) => {

// console.log('yeah');
